<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XYX&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xyx6.top/"/>
  <updated>2023-08-20T07:55:17.896Z</updated>
  <id>http://xyx6.top/</id>
  
  <author>
    <name>XYX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>健身知识</title>
    <link href="http://xyx6.top/2023/06/19/%E5%81%A5%E8%BA%AB%E7%9F%A5%E8%AF%86/"/>
    <id>http://xyx6.top/2023/06/19/%E5%81%A5%E8%BA%AB%E7%9F%A5%E8%AF%86/</id>
    <published>2023-06-19T09:06:48.000Z</published>
    <updated>2023-08-20T07:55:17.896Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="供能物质"><a href="#供能物质" class="headerlink" title="供能物质"></a>供能物质</h1><h2 id="atp"><a href="#atp" class="headerlink" title="atp"></a>atp</h2><pre><code>* 短时间内为身体迅速供能，通常为爆发性运动的主要供能物质，atp可被迅速利用的方式有三种：第一种的直接使用骨骼肌里存储的atp供能，第二种是利用肌酸磷酸合成atp供能，第三种是通过二磷酸腺苷缩合而成。而健身通常使用的肌酸（一水肌酸）主要通过第二种形式合成atp供能。</code></pre><h2 id="糖原"><a href="#糖原" class="headerlink" title="糖原"></a>糖原</h2><pre><code>* 通俗的理解为精米精面等升糖快速的精致碳水，他是人体主要的供能物质，碳水摄入到人体中，形成糖原存在于血液中，为身体的各个组成部分供能。</code></pre><h2 id="脂肪"><a href="#脂肪" class="headerlink" title="脂肪"></a>脂肪</h2><pre><code>* 身体中使用不完的糖原通过胰岛素的作用，最终合成脂肪存入人体囤积。</code></pre><h2 id="蛋白质"><a href="#蛋白质" class="headerlink" title="蛋白质"></a>蛋白质</h2><pre><code>* 蛋白质分解为氨基酸为身体供能，俗称掉肌肉。</code></pre><h2 id="供能顺序：atp-lt-糖原-lt-脂肪-lt-蛋白质"><a href="#供能顺序：atp-lt-糖原-lt-脂肪-lt-蛋白质" class="headerlink" title="供能顺序：atp&lt;糖原&lt;脂肪&lt;蛋白质"></a>供能顺序：atp&lt;糖原&lt;脂肪&lt;蛋白质</h2><h1 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h1><h2 id="酮体指标"><a href="#酮体指标" class="headerlink" title="酮体指标"></a>酮体指标</h2><pre><code>* 酮体为脂肪分解后的产物，因为脂肪分解为脂肪酸，脂肪酸不能直接为大脑供能，脂肪酸需要酮体氨基酸为大脑供能，但效果仍不及糖原效果好（故减脂期间人会变“傻”）。酮体水平高，脂肪分解多越充分，酮体水平低，脂肪参与供能少。正常参考值：0.3-0.5，做到1+或以上则说明进入燃脂通道。</code></pre><h2 id="胰岛素"><a href="#胰岛素" class="headerlink" title="胰岛素"></a>胰岛素</h2><pre><code>* 胰岛素是一种降血糖的激素，他会促进脂肪的合成。当血液中的血糖升高，胰岛素会通过把多余的血糖合成为脂肪存储来达到降血糖的目的，所以我们在日常生活中尽量避免升糖快的食物，每个食物都有升糖指数，指数大于70就是高GI食物（少吃）。</code></pre><h1 id="减脂方法"><a href="#减脂方法" class="headerlink" title="减脂方法"></a>减脂方法</h1><h2 id="碳水循环"><a href="#碳水循环" class="headerlink" title="碳水循环"></a>碳水循环</h2><pre><code>* 通过规律的控制碳水的摄入量来实现减脂，效果肯定没有一直低碳效果好，但是碳水循环因为有高碳日更容易坚持的执行下去，比如三天低碳水，一天高碳水循环往复，低碳日碳水摄入量1.5-2g每公斤体重，高碳日碳水摄入量3-5g每公斤体重。低碳日通过力量训练和有氧运动消耗糖原和脂肪，高碳日补充身体的糖原来维持后续低碳日力量训练的强度，同时拉高身体代谢，以免身体长时间低碳导致代谢低，影响燃脂效果。</code></pre><h2 id="16-8轻断食"><a href="#16-8轻断食" class="headerlink" title="16+8轻断食"></a>16+8轻断食</h2><h2 id="低碳"><a href="#低碳" class="headerlink" title="低碳"></a>低碳</h2><pre><code>* 就是让身体一直处于低碳状态，一直低碳的效果肯定是比高低碳循环的效果好，但是身体长期处于低碳对身体是由危害的：一、大脑长期得不到充分的糖原供能，会使人“变傻”。二 、长期低碳会使人的心情烦躁郁闷，所以低碳很难让人坚持下来。三 、低碳在减脂前期的效果非常好，但随着时间递增，身体长期“吃不饱”，出于身体的保护机制，会逐步降低代谢，使得热量缺口之间变小。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="http://xyx6.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="杂记" scheme="http://xyx6.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>BS架构</title>
    <link href="http://xyx6.top/2022/03/26/BS%E6%9E%B6%E6%9E%84/"/>
    <id>http://xyx6.top/2022/03/26/BS%E6%9E%B6%E6%9E%84/</id>
    <published>2022-03-26T09:43:57.000Z</published>
    <updated>2022-04-04T07:44:21.025Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>传统应用开发架构分为BS和CS两种架构 </p><h2 id="CS架构Client-Server"><a href="#CS架构Client-Server" class="headerlink" title="CS架构Client Server"></a>CS架构Client Server</h2><ul><li>客户机-服务器，即CS架构，CS架构通常采用两层结构，服务器负责数据的管理，客户机负责完成与用户的交互任务。</li><li>客户机通过局域网与服务器相连，接受用户的请求，并通过网络向服务器提出请求，对数据库进行操作。服务器接收客户端的请求，将数据提交给客户端，客户端将数据进行计算并将结果呈现给用户。服务器 还要提供完善安全保护以及对数据完整性的处理等操作，并允许多个客户端同时访问服务器，这就对服务器的硬件处理数据能力提出了很高的要求。</li><li>在CS架构中，应用程序分为两部分：客户端部分和服务器部分。服务器部分是多个用户共享信息和功能，执行后台服务，如控制共享数据库的操作等；客户端为用户专有，负责执行前台功能，在出错提示，在线帮助等方面都有强大的功能，并且可以在子程序之间自由切换。</li><li>CS结构在技术上已经很成熟，它的主要特点就是交互性强，具有安全的存取模式，响应速度快，利于处理大量数据，但是CS结构缺少通用性，系统维护、升级需要重新设计和开发，增加了维护和管理的难度，进一步的数据拓展困难较多，所以CS架构只限于小型的局域网。</li><li>CS架构主要应用与超市收银台，早期的医院挂号系统等，以及PC电脑程序，现如今主流的移动手机app。</li></ul><h2 id="BS架构Browser-Server"><a href="#BS架构Browser-Server" class="headerlink" title="BS架构Browser Server"></a>BS架构Browser Server</h2><ul><li>随着网络技术的发展，特别随着web技术的不断成熟，BS这种软件体系结构出现了。BS架构也被称为浏览器-服务器体系架构,这种 体系架构可以理解为是对CS架构的改变和促进。</li><li>由于网络的快速发展，BS架构的功能越来越强大。这种结构可以进行信息的分布式处理、可以有效降低资源成本，提高设计的系统性能。BS架构有更广的应用范围。在处理模式上大大简化了客户端，用户只需安装浏览器即可。而将应用逻辑集中在服务器和中间件上，可以体改数据的处理性能，在软件的通用性上，BS架构的客户端具有更好的通用性，对应用环境的依赖性小，同时因为客户端使用浏览器，在开发维护上更加便利，可以 减少系统开发和维护成本。</li><li>BS架构的特征和基本结构：在BS结构中，每个节点都发布在网络上，这些节点分为浏览器端，服务器端和中间件，通过它们之间的连接和交互来完成系统的功能任务。三个层次的划分是从逻辑上分的，在实际应用中多根据实际物理网络进行不同的物理划分。</li><li>浏览器端：即用户使用的浏览器，是用户操作系统的接口，用户通过浏览器阶段向服务器端发送请求，并杜伊服务器端返回的结果进行处理并展示，通过界面可以将系统的逻辑功能更好的表现出来。</li><li>服务器端（具体的服务器）：提供数据服务，操作数据，然后把数据结果返回中间件，结果展示在系统页面上</li><li>中间件（运行在服务器上的应用，比如java应用，.net应用 ，PHP应用，作用就是进行数据库和网页之间的数据操做）：这是运行在浏览器和服务器之际按的，这层主要完成系统逻辑，实现具体的功能，接收用户的请求并把这些请求传送给服务器，然后将服务器的结果返回给用户，浏览器和服务器端需要交互的信息使用过中间件完成的。</li><li>就是说web前端工作岗位的程序员目前大部分的工作都是在BS架构上进行开发的，cs加工后相当于做手机app或者是pc-app的工程师做的工作</li><li>bs架构是以浏览器为主，cs架构是以客户端为主，他们都是通过http协议向服务器请求数据与远程服务器进行交互的</li></ul><h2 id="B-S架构的分层"><a href="#B-S架构的分层" class="headerlink" title="B/S架构的分层"></a>B/S架构的分层</h2><p><img src="/2022/03/26/BS%E6%9E%B6%E6%9E%84/1.png" alt></p><ul><li><p>表示层：主要完成用户与应用程序之间的交互，包括接受用户输入的数据，显示应用的输出结果。在此层中，通常不包括系统的业务逻辑，逻辑代码仅与界面元素有关。如分页显示、图片轮播等。</p></li><li><p>业务逻辑层：负责实现应用/业务的主要功能，当前端需要进行数据访问和其他操作时，前端向业务逻辑层发送请求，由业务逻辑层向数据库发送请求完成数据查询等，并在前端和服务端之间传输数据。</p></li><li><p>数据访问层：是系统的持久层，负责对数据库的读写及管理。</p></li></ul><h2 id="BS架构的形式以及链路过程"><a href="#BS架构的形式以及链路过程" class="headerlink" title="BS架构的形式以及链路过程"></a>BS架构的形式以及链路过程</h2><p><img src="/2022/03/26/BS%E6%9E%B6%E6%9E%84/2.png" alt></p><ul><li>这里先明确一个事情，数据链路之间的传输用的是http和tcp协议，http协议是应用层的，tcp/udp是传输层的，http是在tcp协议之上拓展而来的，所以HTTP是在保证tcp的规则下拓展的一套传输协议<ul><li>TCP和UDP是FTP，HTTP和SMTP之类使用的传输层协议。虽然TCP和UDP都是用来传输其他协议的，它们却有一个显著的不同：TCP提供有保证的数据传输，而UDP不提供。这意味着TCP有一个特殊的机制来确保数据安全的不出错的从一个端点传到另一个端点，而UDP不提供任何这样的保证。</li><li>HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议。客户端使用Web浏览器发起HTTP请求给Web服务器，Web服务器发送被请求的信息给客户端。</li><li>简单的来说tcp/udp是机器与机器之间的传输协议，HTTP是浏览器和浏览器和机器之间的传输协议</li></ul></li></ul><ol><li>输入网址</li></ol><ul><li>输入想要访问的网站地址，俗称url</li></ul><ol start="2"><li>缓存解析</li></ol><ul><li>浏览器获取到url后去解析，先看缓存中有没有，浏览器-系统缓存-路由器缓存中查看，如果有则从缓存中显示页面，如果没有就进行步骤三 </li><li>disk cache：将资源缓存到磁盘中，等待下次访问是不需要重新下载找资源，而直接从磁盘中获取</li><li>memory cache：将资源缓存到内存中，等待下次访问是不需要重新下载找资源，而直接从内存中获取</li></ul><ol start="3"><li>域名解析</li></ol><ul><li>DNS解析：域名到IP地址的转化过程。域名的解析工作由DNS服务器完成，解析后可以获取域名相应的IP地址</li></ul><ol start="4"><li>tcp连接</li></ol><ul><li>在域名解析之后，浏览器向服务器发起http请求，tcp连接，三次握手建立连接。tcp协议是面向连接的，所以在传输数据之前必须建立连接</li></ul><ol start="5"><li>服务器收到请求</li></ol><ul><li>服务器收到浏览器发送的请求信息，返回一个响应头和响应体</li></ul><ol start="6"><li>页面渲染</li></ol><ul><li>浏览器收到服务器发送的响应头和响应体，进行客户端渲染，生成Dom树，解析css样式、js交互。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="http://xyx6.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="BS架构" scheme="http://xyx6.top/tags/BS%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于我的2022</title>
    <link href="http://xyx6.top/2021/12/31/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%842022/"/>
    <id>http://xyx6.top/2021/12/31/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%842022/</id>
    <published>2021-12-31T01:43:38.000Z</published>
    <updated>2021-12-31T03:09:59.025Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><p>   2021年过得真快，快得来不及反应就已经迈进了2022的大门。如果你问我这一年做了什么，我可能会说：结交了新朋友，丰富了工作经验，成为了一名铲屎官······但我觉得每一年都应该有自己的规划和目标，这样生活起来才有奔头，年轻不就在于折腾嘛，不矫情了，就说说我在2022年都有什么愿望吧。</p><ol><li>提升个人能力（学React，TS）</li><li>体脂15%，屈臂臂围40</li><li>扣篮</li><li>崽崽长到10斤（好像快了，那就15斤）</li><li>给崽换个大一点的窝</li><li>家人朋友身体健康<br><br><br></li></ol><p>最后引用人民日报的一句话：</p><ul><li><p>我们总是为了</p></li><li><p>太多遥不可及的东西去奔命</p></li><li><p>却忘了人生真正的幸福</p></li><li><p>不过就是灯火阑珊的温暖</p></li><li><p>和柴米油盐的充实</p></li><li><p>这一年里</p></li><li><p>无论你赚钱是多是少</p></li><li><p>经历的事情是好是坏</p></li><li><p>请记住，如果这一年</p></li><li><p>你很健康，那就是最好的一年</p><p><img src="/2021/12/31/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%842022/1.jpg" alt></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="http://xyx6.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="杂记" scheme="http://xyx6.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0</title>
    <link href="http://xyx6.top/2021/12/27/Vue3.0/"/>
    <id>http://xyx6.top/2021/12/27/Vue3.0/</id>
    <published>2021-12-27T06:34:07.000Z</published>
    <updated>2021-12-31T00:53:35.567Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><p><strong><em>本篇笔记来源于尚硅谷（本人加以注解）</em></strong></p><h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity" target="_blank" rel="noopener">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs" target="_blank" rel="noopener">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+" target="_blank" rel="noopener">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors" target="_blank" rel="noopener">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0" target="_blank" rel="noopener">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p><ul><li>简单来说就是defineProperty是对对象属性的劫持，Proxy是对整个对象的劫持；defineProperty无法监听新增和删除，而Proxy可以；但Proxy不兼容IE</li></ul></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……（源码部分一直是我的弱项，mark）</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript(TS也是以后前端发展的趋势，baidu很早就开始用了，mark)</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite" target="_blank" rel="noopener">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn" target="_blank" rel="noopener">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具(老一代是webpack)。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动<ul><li>以前的构建工具只要npm run serve就会打包。</li></ul></li><li>轻量快速的热重载（HMR）。<ul><li>对标webpack，比其更快。</li></ul></li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图<ul><li>传统构建的工作模式：入口文件–分析路由–分析模块–打包–告诉用户服务器准备完毕。（所以每次构建项目都会等待一段打包的时间）</li><li>vite的工作模式：一上来先告诉用户服务器准备完毕（这时的服务器实际是空壳服务器，里面什么都没有）–然后根据用户访问的路径来分析要加载什么模块，相当于按需加载，比传统的构建模式要更快。</li></ul></li></ul><h2 id><a href="#" class="headerlink" title></a><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left"><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px"></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noopener">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据，方法，计算属性，监视属性，生命周期函数等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板template中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数（vue2.x中叫h函数）：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise包裹的对象, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code>(因为ref定义完的数据是一个refImpl对象)</li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数（proxy操作都封装在reactive函数中）。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">'count'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;&#125;, </span><br><span class="line">    <span class="keyword">set</span> () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>存在问题</strong>：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p><ul><li>ECMA正在将object对象上的方法移植到Reflect对象上，并且简化object对象的一部分操作代码</li></ul></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    <span class="keyword">get</span> (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    <span class="keyword">set</span> (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">'tom'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，这时取到的this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性（在this对象的$ attrs属性里）, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">setup()&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">'-'</span> + person.lastName</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">        <span class="keyword">get</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> person.firstName + <span class="string">'-'</span> + person.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(value)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.split(<span class="string">'-'</span>)</span><br><span class="line">            person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],(newValue,oldValue)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum或msg变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'person变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function"><span class="params">()</span>=&gt;</span>person.job,(newValue,oldValue)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'person的job变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function"><span class="params">()</span>=&gt;</span>person.job,()=&gt;person.name],(newValue,oldValue)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'person的job变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line">watch(<span class="function"><span class="params">()</span>=&gt;</span>person.job,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person的job变化了'</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive所定义的对象中的某个属性，所以deep配置有效。如果监视的是reactive所定义的整个对象时,deep无效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'watchEffect配置的回调执行了'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px"></div><div style="border:1px solid black;width:510px;height:985px;"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px"></div><p>1</p><ul><li><p>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：</p><ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li><p>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：</p><ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li><li><p>组合式api中写的生命周期钩子要比配置项的生命周期钩子执行时机快</p></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useadd.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> dafault <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=ref(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">adda</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++</span><br><span class="line">    &#125;</span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListenner(<span class="string">'click'</span>,adda)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//vue文件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> useadd <span class="keyword">from</span> <span class="string">'../hooks/useadd'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        <span class="keyword">const</span> a = useadd()</span><br><span class="line">        <span class="keyword">return</span> &#123;a&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用还不想丢失响应式时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。（修改对象中的数据不会触发响应式，但是如果整体替换该对象会触发响应式）</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读，深层的还是响应式的）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项<strong>跟踪</strong>和<strong>更新</strong>触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#39;Demo&#39;,</span><br><span class="line">setup()&#123;</span><br><span class="line">&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref</span><br><span class="line">&#x2F;&#x2F;自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">&#x2F;&#x2F;通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)&#x3D;&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer &#x3D; setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">value &#x3D; newValue</span><br><span class="line">trigger() &#x2F;&#x2F;告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px"><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">'奔驰'</span>,<span class="attr">price</span>:<span class="string">'40万'</span>&#125;)</span><br><span class="line">    provide(<span class="string">'car'</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props,context)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">'car'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left"></div><div style="width:300px;height:370px;overflow:hidden;">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left"> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><div style="width:430px;height:340px;overflow:hidden;">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><br><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense-试验阶段"><a href="#3-Suspense-试验阶段" class="headerlink" title="3.Suspense(试验阶段)"></a>3.Suspense(试验阶段)</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>一般的组件渲染过程得等子组件渲染完成后，父组件和子组件才能同时出现；而使用Suspense后可以让父子组件异步渲染</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> Child = defineAsyncComponent(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'./components/Child.vue'</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Suspense&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">'MyButton'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  template: <span class="string">'&lt;button @click="count++"&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close&#x3D;&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#39;close&#39;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级框架" scheme="http://xyx6.top/categories/%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
      <category term="Vue3.0" scheme="http://xyx6.top/tags/Vue3-0/"/>
    
  </entry>
  
  <entry>
    <title>《易经》入门</title>
    <link href="http://xyx6.top/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://xyx6.top/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-25T09:06:48.000Z</published>
    <updated>2021-12-30T10:06:55.637Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="易经中基本概念的介绍"><a href="#易经中基本概念的介绍" class="headerlink" title="易经中基本概念的介绍"></a>易经中基本概念的介绍</h1><h2 id="爻"><a href="#爻" class="headerlink" title="爻"></a>爻</h2><ul><li><p>爻（yao二声）分为两种，一种是阴爻，一种为阳爻。</p><p><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E7%88%BB.png" alt></p></li><li><p>阴爻和阳爻是易经中最基本的单位，易经中所有的卦都是用爻来组成的。</p></li></ul><h2 id="卦"><a href="#卦" class="headerlink" title="卦"></a>卦</h2><h3 id="八卦"><a href="#八卦" class="headerlink" title="八卦"></a>八卦</h3><ul><li>阴爻和阳爻组成的第一个单位就是八卦，又叫三画卦，这样的三画卦有八个，所以简称为八卦。“八卦”、“三画卦”、“八经卦”、“经卦”都是指的八卦。</li><li>这八个卦分别是：<ul><li>乾（☰）(qian)、</li><li>兑（☱）(dui)、</li><li>离（☲）(li)、</li><li>震（☳）(zhen)、</li><li>巽（☴）(xun)、</li><li>坎（☵）(kan)、</li><li>艮（☶）(gen)、</li><li>坤（☷）(kun)、</li><li>记忆口诀：乾三连， 坤六断； 震仰盂（yu四声）， 艮覆碗； 离中虚， 坎中满； 兑上缺， 巽下断。（个人建议结合图片来理解）</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%85%AB%E5%8D%A6.png" alt></li></ul></li><li>八经卦又分为先天八卦与后天八卦，先天八卦与后天八卦的区别就是八个卦之间的方位关系不一样，作为了解即可。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%85%88%E5%90%8E%E5%A4%A9%E5%85%AB%E5%8D%A6.png" alt></li></ul><h3 id="卦象"><a href="#卦象" class="headerlink" title="卦象"></a>卦象</h3><ul><li>因为每一卦都代表了一类事物，易经中的卦是世间万物的高度概括，用易经的话来说就是每一卦都有自己的“象”。</li><li>卦象可以非常形象的理解复卦的构成（这点后面会说到，先码住）</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%8D%A6%E8%B1%A1.png" alt></li></ul><h3 id="卦序"><a href="#卦序" class="headerlink" title="卦序"></a>卦序</h3><ul><li>先天八卦的排列是按照一定的次序来进行排列的，而且每一个卦前面都有一个序号，这个就叫“卦序”，因为它是数字，所以简称为“卦数”，卦序就是“卦数”。</li><li>简单地说，就是每一个单卦对应一个数字，反过来，一个数字也代表一个卦。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%8D%A6%E6%95%B0.png" alt></li><li>举例：25与6<ul><li>25/8=3余1，我们透过现象看本质，所以25就相当于1。6没有满8，所以不用除，6就是它本身。</li><li>我们对应卦数来看，1为乾卦，6为坎卦，1与6，也就是乾卦与坎卦，上乾下坎组成了：天水讼——讼卦（䷅）。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%A4%A9%E6%B0%B4.png" alt></li><li>这时候我们就需要用到复卦这个概念了。</li></ul></li></ul><h3 id="复卦"><a href="#复卦" class="headerlink" title="复卦"></a>复卦</h3><ul><li>64卦又称为六画卦，因为它是由六个爻组成的，另外64卦还有一个名称叫“复卦”，就是重复的“复”。其实任意64卦中一个卦都是由2个八卦组成的。一个八卦由3个爻组成，2个八卦正好6个爻。</li><li>三个爻组成一个八卦，两个八卦组成一个复卦。</li><li>八卦叫“经卦”，六十四卦又叫“复卦”。</li><li>结合上面的天水讼卦很容易就能理解</li></ul><h3 id="卦名"><a href="#卦名" class="headerlink" title="卦名"></a>卦名</h3><ul><li>这里的卦名是指64卦中每一个卦的名称。  </li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%A4%8D%E5%8D%A6.png" alt></li><li>举例：上文中提到的天水讼卦，简称讼卦<ul><li>乾卦在上为客卦，坎卦在下为主卦，每一卦都分为主卦（又叫下卦、内卦）与客卦（又叫上卦、外卦）。</li><li>为什么叫天水讼卦呢？讼卦的上卦为乾卦，乾为天（结合卦象），下卦为坎，坎为水，所以称为天水讼卦，64卦所有卦都是这样，上下一结合就出来一个卦，非常形象。</li></ul></li><li>先人为了方便记忆，总结了一道歌谣《卦序歌》方便大家背诵<ul><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%8D%A6%E5%BA%8F%E6%AD%8C.png" alt></li></ul></li></ul><h2 id="复卦的构成"><a href="#复卦的构成" class="headerlink" title="复卦的构成"></a>复卦的构成</h2><ul><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%A4%A9%E6%B0%B4%E8%AE%BC.png" alt></li><li>六十四卦中的任何一个卦都有一个自己的结构，如上图。</li><li>这里来简单的解释一下：<ul><li>卦名：就是卦的名称</li><li>卦辞：就是解释整个卦的含义和吉凶的文字（百度百科能查到详细译文）</li><li>爻辞：是解释某一个爻的含义和吉凶的文字</li><li>爻：64卦每一个卦都有6个爻，所以周易共有64个卦，也就是周易全书共有64*6=384爻，但是乾坤两卦各多了一条总结的“用辞”，今天我们一般把它们看成同爻辞一样的地位，所以算上这两条用辞的话，周易共有：384+2=386爻,也就是说，整部《易经》描述了人生386种情况。</li><li>爻位：爻位是指每一爻在卦中排列的位置<ul><li>第一，所有卦的爻一定要从下往上数！它是自下而上去排列的</li><li>第二，注意名称叫法。从下往上数，第1爻，第2爻，第3爻，第4爻，第5爻，第6爻，它们的名称为：初爻，二爻，三爻，四爻，五爻，六爻</li><li>第三，每一个爻都有阴阳之分，如果跟上面一样，“初爻，二爻，三爻，四爻，五爻，六爻”，这只能知道它是第几爻，但是不知道它是阳爻还是阴爻，所以为了一说出来就能知道是阳爻还是阴爻，所以阳爻用九表示，阴爻用六表示。因为奇数为阳，偶数为阴。而“九”为奇数，所以表示阳爻；“六”为偶数，所以表示阴爻</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E7%88%BB%E4%BD%8D.png" alt></li></ul></li></ul></li><li><strong>周易的卦辞与爻具有高度的概括性与抽象性，所以可以用来预测很多事情</strong></li></ul><h3 id="卦中爻与爻之间的关系"><a href="#卦中爻与爻之间的关系" class="headerlink" title="卦中爻与爻之间的关系"></a>卦中爻与爻之间的关系</h3><ul><li>当位与中正</li></ul><ol><li><p>当位与不当位</p><ul><li>六个爻位中，初、三、五是奇数位，二、四、上是偶数位。奇数属阳，偶数属阴。</li><li>六二四卦，三百八十四爻，只要阳爻在奇数位，阴爻在偶数位，就叫做“当位”，即阳爻居阳位，阴爻居阴位即为“当位”。</li><li>一般情况来说，当位就意味着“吉”，不当位则代表“不吉”。但是这只能是“一般来说”，因为当位不当位是判断吉凶的因素之一，还有很多其他很多因素。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%BD%93%E4%BD%8D.png" alt></li></ul></li><li><p>中正</p><ul><li>一个卦自下往上数，第二爻与第五爻分别为上卦与下卦中间的位置。</li><li>凡阳爻居中位，象征“刚中”之德；阴爻居中位，象征“柔中”之德。所以如果阴爻在第二位，阳爻在第五位的位置，则代表既中且正，简称为“中正”（阳爻居阳位，阴爻居阴位），中正在《易经》中代表美善的象征。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E4%B8%AD%E6%AD%A3.png" alt></li></ul></li></ol><ul><li>乘承比应<ul><li>在六爻之间，根据各爻的位次、性质、远近距离等关系，最主要的就是“承”“乘”“比”“应”这四种关系。</li></ul></li></ul><ol><li><p>乘</p><ul><li>一个卦中任意两个爻，只要是阴爻在阳爻上面，就称为”乘刚”，简称“乘”，比如泰卦，六四乘九三等。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E4%B9%98.png" alt></li><li>表示弱者（柔者）乘凌强者（刚者），“小人”乘凌了“君子”，代表含义往往是不吉的。如几个阴爻都在一个阳爻之上，则这几个阴爻对这一阳爻都可称“乘”。在《易经》里面，乾为天，坤为地，天为阳，地为阴，阳居上，阴居下，这样才是正常的，但是如果地跑到天的上面，这不是反过来了吗？所以阴跑到阳的上面这样肯定是不吉利的。</li></ul></li><li><p>承</p><ul><li>所以反过来，只要相邻两爻，阴爻在阳爻的下面，就被称之为“承刚”，简称“承气”，它代表柔顺承强者，弱者向强者请求援助。比如井卦，初六爻承九二爻，六四爻承九五爻等。</li><li>这个时候，我们就称为爻当位，因为阳在阴的上面，就如同是天在地的上面一样，虽然在实际运用当中，我们要具体情况具体分析，但是一般来说，两爻阴阳当位者多吉，两爻阴阳不当位者多凶。如一个阴爻之上有几个阳爻，则这一阴爻对几个阳爻都可称“承”。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E6%89%BF.png" alt></li></ul></li><li><p>比</p><ul><li>凡相邻两爻，都可称为“比”（比近）。只要是两个爻挨着，就可以称为“比”，比可以理解为邻居的意思，就是挨着的两个爻。这个还要再通过两爻的阴阳承乘以及其它的关系详细分析</li></ul></li><li><p>应</p><ul><li>在一个卦中，初爻和四爻，二爻和五爻，三爻和上爻之间的关系叫做“应”，因为他们分别处于上下两个经卦的对应位置。</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%BA%94.png" alt></li><li>对应的两个爻，如果是一阴一阳，则称为互相感应，称为“有应”；如果都是阳爻，或者都是阴爻，就会没有交感，就称为“无应”。</li><li>“承”“乘”“比”“应”单独分开来看，也不过如此，但是如果合起来看就复杂了，你想，一个卦里面爻与爻之间的关系一定是综合来看的，不可能分开来看。</li></ul></li></ol><h1 id="大衍筮法"><a href="#大衍筮法" class="headerlink" title="大衍筮法"></a>大衍筮法</h1><ul><li>那么有人问了，前面讲的易经八卦，怎么突然蹦出来这么一个东西？且听我娓娓道来，前面讲的是易经中的概念，相当于数学公式中的符号，而大衍筮法相当于公式，你光有数学符号但没有公式怎么学以致用呢。</li><li>大衍筮法即蓍草揲蓍法，是“四书五经”之《易经》原文中所唯一记载的一种最为古老的方法。</li><li>大衍筮法用数字变化成周易阴阳卦爻符号，并以此结合《易经》卦爻辞吉凶作为决策或谋略的重要判断方法。</li><li>以下内容截选自朱熹隶定的易传《系辞上传》：<ul><li>辞曰：“天一，地二。天三，地四。天五，地六。天七，地八。天九，地十。天数五，地数五，五位相得而各有合。天数二十有五，地数三十，凡天地之数五十有五。此所以成变化而行鬼神也。</li><li>大衍之数五十，其用四十有九。分而为二以象两，挂一以象三，揲之以四以象四时，归奇于扐以象闰，五岁再闰，故再扐而后挂。</li></ul></li><li>其实很多人推崇的“大衍筮法”就是上面这两段文字，我们来逐句研读一遍<ol><li><strong><em>大衍之数五十，其用四十有九</em></strong>：就如同是你如果你准备了50根筷子，但是这50根不能都用，要拿出一根来放在桌子上一直不用，两只手里只能拿49根</li><li><strong><em>分而为二以象两</em></strong>：你手里目前不是有49根吃饭的筷子嘛，分成两组，左手一组（A组），右手一组（B组），所以这就叫“分而为二以象两”</li><li><strong><em>挂一以象三</em></strong>：分成两组之后，从A组里面拿出一根放在左手小指与无名指之间，其余的放在桌子上。这就叫“挂一以象三”，这个“一”就是拿出一根来放在左手小指与无名指之间</li><li><strong><em>揲之以四以象四时</em></strong>：A组拿出一根来，然后把剩下的数除以四，也就是4根一组，4根一组，看看最后一组还剩下几根，这个就叫“揲之以四以象四时</li><li><strong><em>归奇于扐以象闰</em></strong>：上面说4根一组看剩下几根，那么会剩下几根呢？想想也知道，要么1根，要么2根，要么3根，要么4根，这个时候不管剩下几根，把剩下的余数也放在小指和无名指之间</li><li><strong><em>五岁再闰，故再扐而后挂</em></strong>：上面1-4说的是A组，A组的步骤告一段落，我们最开始的时候是分成两组的，A组结束后我们开始B组，B组的操作有一个关键点：刚才A组的时候，我们最开始是先从A组拿了一根放到左手小指与无名指之间的，叫做：“挂一以象三”，B组没有这个流程，所以B组直接4个一组，4个一组来分就可以了，同样的，B组分到最后也会有余数，1，2，3，4这四种情况，把余数也是放到小指与无名指之间，这个就叫“故再扐而后挂”。然后，把小指与无名指之间的所有的筷子都拿出来，放到桌子左上角。</li></ol><ul><li>上面只是第一步运算，然后重复进行2-6的步骤，进行三次（下图为整个流程详细说明）</li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%A4%A7%E8%A1%8D1.png" alt></li><li><img src="/2021/12/25/%E3%80%8A%E6%98%93%E7%BB%8F%E3%80%8B%E5%85%A5%E9%97%A8/%E5%A4%A7%E8%A1%8D.png" alt></li><li>最后不管是多少都除4，这样三次运算以后就可能会如下结果：36/4=9，32/4=8，28/4=7，24/4=6</li><li>到最后6，7，8，9才是我们最终想要的结果</li><li>6，7，8，9这四个数对应的就是太阴（老阴），太阳（老阳），少阴，少阳。6，8为阴，阴在易经里面用“⚋”这个符号表示。7，9为阳，阳在易经里面用“⚊”这个符号表示。</li><li>6代表阴的尽头，9代表阳的尽头，就是说6、9马上就要变化了，因为到尽头了嘛。所以6或者9就是动爻！</li></ul></li><li>经过3遍操作得到一个数，经过18遍的操作，你得到了6个数，这6个数组成了一个卦。你得到一个卦之后，还没有结束，得到了一个卦只是表示当前的状态，那未来的状态看什么呢？看“之卦”！之卦是由本卦的“动爻”变化之后形成的卦。</li></ul><h2 id="举例（例子来源于网络，您看一乐就行了）："><a href="#举例（例子来源于网络，您看一乐就行了）：" class="headerlink" title="举例（例子来源于网络，您看一乐就行了）："></a>举例（例子来源于网络，您看一乐就行了）：</h2><ul><li>2017年易友小刘得了重病，问手术治疗后病情会怎样发展？遂布大衍，筮得雷水解卦，六二爻动，卦变雷地豫。<ul><li>解卦：<ul><li>本卦是异卦相叠，下卦为坎，上卦为震。震为雷、为动；坎为水、为险。险在内，动在外。本卦的大意是，等严冬过后，当人们听到天上第一个雷声时，就知道地上的水已经冰消雪化，春天到来了。这意味着万物已经从不适于生存的寒冬解脱出来。“严冬天地闭塞，静极而动。万象更新，冬去春来，一切消除，是为解。”解卦象征着灾祸危难的舒解。从另一个角度看，坎下震上，是说在危险中只要能积极坚持活动，终有一天会从困难的险境中解脱出来。</li><li>靳极苍解：得此卦者，到西南方行事有利，且要及早前去，这样才能获得吉祥。如果不外出，七日后吉。</li><li>九二爻爻辞：田获三狐，得黄矢；贞吉。本爻辞的意思是：田猎时捕获许多只狐狸，又得到了象征美德的黄色箭矢，保持这种品德并坚守正道，可获吉祥。九二这一爻启示的道理是：解除困难需把握中庸、正直的原则。占得此爻者，要记住解决问题不要走极端，坚持中间的道路，这样才能更好地消除隐患。</li></ul></li><li>结论：<ul><li>首先卦名为解，可知手术会成功；再加上二爻爻辞有吉这个字眼，更可放心。变卦为豫，豫为高兴，如果病情继续恶化的话是不可能高兴的，并且加上爻辞也含有吉。综合判断人会没事，手术成功！</li></ul></li><li>反馈：<ul><li>手术非常成功，小刘身体早已康复如初，迄今没有任何不适。</li></ul></li></ul></li><li><strong><em>易经当中解卦是特别大的一门学问，需要大量的阅历和经验来加持</em></strong></li></ul><h2 id="易经作为中华文化的源头，包罗万象，不是一时半会就能搞明白的，但我知道它并不仅仅只是一本带有玄幻色彩的占卜书籍，秉着科学严谨的态度来看待即可。自知才疏学浅，还需要经历了社会的历练，才能够比较客观的深刻的理解其中的内容。"><a href="#易经作为中华文化的源头，包罗万象，不是一时半会就能搞明白的，但我知道它并不仅仅只是一本带有玄幻色彩的占卜书籍，秉着科学严谨的态度来看待即可。自知才疏学浅，还需要经历了社会的历练，才能够比较客观的深刻的理解其中的内容。" class="headerlink" title="易经作为中华文化的源头，包罗万象，不是一时半会就能搞明白的，但我知道它并不仅仅只是一本带有玄幻色彩的占卜书籍，秉着科学严谨的态度来看待即可。自知才疏学浅，还需要经历了社会的历练，才能够比较客观的深刻的理解其中的内容。"></a>易经作为中华文化的源头，包罗万象，不是一时半会就能搞明白的，但我知道它并不仅仅只是一本带有玄幻色彩的占卜书籍，秉着科学严谨的态度来看待即可。自知才疏学浅，还需要经历了社会的历练，才能够比较客观的深刻的理解其中的内容。</h2><hr><ul><li>本文图文多数来自知乎作者北冥木木</li><li>链接：<a href="https://zhuanlan.zhihu.com/p/342085432" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/342085432</a></li><li>来源：知乎</li><li>著作权归作者所有。 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="http://xyx6.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="杂记" scheme="http://xyx6.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://xyx6.top/2021/07/13/Promise/"/>
    <id>http://xyx6.top/2021/07/13/Promise/</id>
    <published>2021-07-12T17:30:00.000Z</published>
    <updated>2021-07-13T14:01:45.756Z</updated>
    
    <content type="html"><![CDATA[<p> -</p><a id="more"></a><h1 id="Promise的理解和应用"><a href="#Promise的理解和应用" class="headerlink" title="Promise的理解和应用"></a>Promise的理解和应用</h1><h2 id="promise是什么"><a href="#promise是什么" class="headerlink" title="promise是什么"></a>promise是什么</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ul><li>抽象表达<ol><li>promise是一门新的技术(ES6规范)</li><li>promise是js中进行异步编程的新解决方案(旧方案是单纯使用回调函数)</li></ol></li><li>具体表达<ol><li>从语法上来说:promise是一个构造函数</li><li>从功能上来说:promise对象用来封装一个异步操作并可以获取成功和失败的结果值<h3 id="promise的状态"><a href="#promise的状态" class="headerlink" title="promise的状态"></a>promise的状态</h3></li></ol></li><li>实例对象的一个属性PromiseState<pre><code>1. pending 未决定的 2. resolved/fullfillled 成功3. rejected 失败</code></pre></li><li>promise对象的状态只改变一次<h3 id="promise对象的值"><a href="#promise对象的值" class="headerlink" title="promise对象的值"></a>promise对象的值</h3></li><li>实例对象中的另一个属性PromiseResult</li><li>保存着异步任务成功/失败的结果</li><li>无论变为成功还是失败 , 都会有一个结果数据</li><li>成功的结果数据一般称为 value, 失败的结果数据一般称为 失败的结果数据一般称为 reason<h3 id="promise的基本流程"><a href="#promise的基本流程" class="headerlink" title="promise的基本流程"></a>promise的基本流程</h3><img src="/2021/07/13/Promise/1.png" alt><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1) 创建promise对象(pending状态), 指定执行器函数</span><br><span class="line">    const p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 2) 在执行器函数中启动异步任务 </span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            const time &#x3D; Date.now()</span><br><span class="line">            &#x2F;&#x2F; 3) 根据结果做不同处理  </span><br><span class="line">            </span><br><span class="line">            if (time % 2 &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                resolve(&#39;成功的值 &#39; + time)</span><br><span class="line">            &#125; else &#123; </span><br><span class="line">                reject(&#39;失败的值&#39; + time)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 2000)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    value &#x3D;&gt; &#123; </span><br><span class="line">        console.log(&#39;成功的value: &#39;, value)</span><br><span class="line">    &#125;, </span><br><span class="line">    reason &#x3D;&gt; &#123; </span><br><span class="line">        console.log(&#39;失败的reason: &#39;, reason)</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="为什么要用promise"><a href="#为什么要用promise" class="headerlink" title="为什么要用promise"></a>为什么要用promise</h2><h3 id="支持链式调用，可以解决回调地狱问题"><a href="#支持链式调用，可以解决回调地狱问题" class="headerlink" title="支持链式调用，可以解决回调地狱问题"></a>支持链式调用，可以解决回调地狱问题</h3><ol><li>什么是回调地狱<ul><li>回调函数嵌套调用，外部回调函数异步执行的结果 是嵌套的回调执行的条件</li></ul></li><li>回调地狱的缺点<ul><li>不便于阅读</li><li>不便于异常处理</li></ul></li><li>解决方案<br> promise链式调用</li><li>终极解决方案<br> async/await</li></ol><h2 id="如何使用promise"><a href="#如何使用promise" class="headerlink" title="如何使用promise"></a>如何使用promise</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ol><li><p>Promise构造函数 : Promise (excutor) {}</p><ul><li>executor(执行器)函数 : 把promise对象的参数叫做执行器函数： (resolve, reject) =&gt; {}<ul><li>执行器函数会在promise内部立即同步调用，then方法是异步调用的</li></ul></li><li>resolve函数 : 内部定义成功时我们调用的函数 value =&gt; {}</li><li>reject函数 : 内部定义失败时我们调用的函数 reason =&gt; {}</li></ul></li><li><p>Promise.prototype.then方法 : (onResolved, onRejected) =&gt; {}</p><ul><li>onResolved函数 : 成功的回调函数 (value) =&gt; {}</li><li>onRejected函数 : 失败的回调函数 (reason) =&gt; {}</li><li>说明:指定用于得到成功value的成功回调和用于失败reason的失败回调返回一个新的promise对象</li></ul></li><li><p>Promise.prototype.catch方法 : (onRejected) =&gt; {}</p><ul><li>onRejected函数 : 失败的回调函数 (reason) =&gt; {}</li><li>说明：then方法的语法糖，相当于 相当于 : then(undefined, onRejected)</li></ul></li><li><p>Promise.resolve方法 : (value) =&gt; {}</p><ul><li>value:成功的数据或 promise对象</li><li>说明 :返回一个成功 /失败的 promise对象</li></ul></li><li><p>Promise.reject方法 : (reason) =&gt; {}</p><ul><li>reason: 失败的原因</li><li>说明 : 返回一个失败的 promise对象</li></ul></li><li><p>Promise.all方法 : (promises) =&gt; {}</p><ul><li>promises: 包含 n个 promise的数组 的数组</li><li>说明 : 返回一个新的promise，只有所有的promise都成功才成功，只要有一个失败了就直接失败</li></ul></li><li><p>Promise.race方法 : (promises) =&gt; {}</p><ul><li>promises: 包含 n个 promise的数组 的数组</li><li>说明 : 返回一个新的 promise, 第一个完成的promise的结果状态就是最终的结果状态</li></ul></li><li><p><strong><em>promisify函数</em></strong></p><ul><li>可以将一般的回调函数转化成返回promise对象的函数</li></ul></li></ol><h3 id="promise的几个关键问题"><a href="#promise的几个关键问题" class="headerlink" title="promise的几个关键问题"></a>promise的几个关键问题</h3><ol><li><p>如何改变promise的状态</p><ul><li>resolve(value): 如果当前是 pending就会变为 resolved</li><li>reject(reason): 如果当前是 pending就会变为 rejected</li><li>抛出异常 : 如果当前是 pending就会变为 rejected</li></ul></li><li><p>一个promise对象指定多个成功/失败的回调函数，都会调用吗</p><ul><li>当promise的状态改变为相应状态时都会调用</li></ul></li><li><p>改变promise状态和指定回调函数谁先谁后</p><ul><li>都有可能，正常情况下时先指定回调再改变状态，但也可以先改变状态再指定回调</li><li>如何先改变状态在指定回调<ol><li>在执行器函数直接调用resolve/reject(同步任务)</li><li>延迟更长时间才调用then(比执行器函数时间长)</li></ol></li><li>如何先指定回调再改变状态<ol><li>执行器函数是异步任务，在异步回调函数中调用resolve/reject的时候，这时候先指定回调，后改变状态</li></ol></li><li>什么时候才能拿到数据<ol><li>如果是先改变的状态，当指定回调函数的时候，回调函数就会调用，从而得到数据</li><li>如果是先指定的回调(先指定不是先调用)，当状态发生改变后，再调用回调函数时，才能得到数据</li></ol></li></ul></li><li><p>promise.then()返回的新promise的结果状态由什么决定</p><ul><li>简单表达：由then()指定的回调函数执行的结果绝定</li><li>详细表达：<ol><li>如果抛出异常，新promise变为rejected，reason为抛出的异常</li><li>如果返回的是非promise的任意值，新promise变为resolved，value为返回的值</li><li>如果返回的是另一个新promise，此promise的结果就会成为新promise的结果</li></ol></li></ul></li><li><p>promise如何串联多个操作任务</p><ul><li>promise的then返回一个新的promise，可以看成then()的链式调用</li><li>通过then的链式调用串联多个异步或同步任务 </li></ul></li><li><p>promise异常穿透</p><ul><li>当使用promise的then链式调用时，可以在最后指定失败的回调</li><li>当前面的操作出现任何异常，都会直接传到最后失败的回调中处理</li></ul></li><li><p>中断promise链</p><ul><li>当使用promise的then链式调用时，在中间中断，不再调用后面的回调函数</li><li>办法：在回调函数中返回一个pendding状态的promise对象return new Promise(()=&gt;{})</li></ul></li></ol><h1 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h1><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><ol><li>函数的返回值为promise对象</li><li>promise对象的结果由async函数执行的返回值绝定</li></ol><h2 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h2><ol><li>await右侧的表达式一般为promise对象，但也可以是其他值</li><li>如果表达式是promise对象，await返回的是promise成功的值</li><li>如果表达式是其他值，直接将此值作为await的返回值</li></ol><ul><li>await必须写在async函数中，但async函数中可以没有await</li><li>如果await的promise失败，就会抛出异常，需要通过try catch捕获处理</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; -&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://xyx6.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://xyx6.top/tags/ES6/"/>
    
      <category term="promise" scheme="http://xyx6.top/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Vue实战之电商数据可视化平台</title>
    <link href="http://xyx6.top/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/"/>
    <id>http://xyx6.top/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/</id>
    <published>2021-07-12T09:07:52.000Z</published>
    <updated>2021-07-12T16:46:24.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br> 本次项目主要是对数据的可视化展示，前端应用ECharts对数据进行可视化</p></blockquote><a id="more"></a><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>支持两套主题，图标的主题可以在echarts官网diy<br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/1.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/2.png" alt></p><h2 id="组件展示"><a href="#组件展示" class="headerlink" title="组件展示"></a>组件展示</h2><p><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/11.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/22.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/33.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/44.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/55.png" alt><br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/77.png" alt></p><h2 id="多端联动效果"><a href="#多端联动效果" class="headerlink" title="多端联动效果"></a>多端联动效果</h2><p><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/88.png" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>Node+KOA2<ul><li>KOA2是express原班人马打造的，express的异步处理是用的回调函数，但是KOA2使用的是async/await</li><li>KOA2最大的特点是独特的中间件控制流程，是一个典型的洋葱模型<br><img src="/2021/07/12/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0/99.png" alt></li><li>这种中间件可能还不仅仅只有一个，可能会存在多个，比如上图所示, 它就存在三层中间件，这三<br>层中间件在处理请求的过程以及它调用的顺序为:<ul><li>当一个请求到达咱们的服务器，最先最先处理这个请求的是第一层中间件</li><li>第一层的中间件在处理这个请求之后，它会把这个请求给第二层的中间件</li><li>第二层的中间件在处理这个请求之后，它会把这个请求给第三层的中间件</li><li>第三层中间件内部并没有中间件了, 所以第三层中间件在处理完所有的代码之后，这个请求又会到了第二层的中间件，所以第二层中间件对这个请求经过了两次的处处理第二层的中间件在处理完这个请求之后，又到了第一层的中间件, 所以第一层的中间件也对这个请求经过了两次的处理</li><li>这个调用顺序就是洋葱模型, 中间件对请求的处理有一种先进后出的感觉，请求最先到达第一层中间件，而最后也是第一层中间件对请求再次处理了一下</li></ul></li><li><strong><em>根据这个特性，本次项目设置了三个中间件，一个用来记录请求的总耗时，一个用来设置响应头，最后一个根据url读取相应文件的信息</em></strong></li></ul></li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>Vue+ECharts<ul><li>本次echarts的配置项进行了分离，分别是默认基础配置项，数据配置项，分辨率适配项，先进行单独图表组件的开发，最终将组件进行合并</li></ul></li></ul><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><ul><li>WebSocket 可以保持着浏览器和客户端之间的长连接， 通过WebSocket 可以实现数据由后端推送到前端，保证了数据传输的实时</li><li>通过建立长连接，客户端发送数据给服务端，服务端返回数据，从而实现多端联动的效果</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt; 本次项目主要是对数据的可视化展示，前端应用ECharts对数据进行可视化&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://xyx6.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>博客挂载到GitHub</title>
    <link href="http://xyx6.top/2020/11/25/%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BD%E5%88%B0GitHub/"/>
    <id>http://xyx6.top/2020/11/25/%E5%8D%9A%E5%AE%A2%E6%8C%82%E8%BD%BD%E5%88%B0GitHub/</id>
    <published>2020-11-25T05:21:55.000Z</published>
    <updated>2020-11-25T05:46:44.585Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><ul><li>由于阿里云半年学生免费的服务器即将到期，所以就把博客挂载到GitHub上，这样就不用担心服务器的问题了，毕竟对于一个学生党来说每个月服务器的维护费用还是挺高的，5555···</li><li>博客挂载到GitHub上的步骤：<ol><li>在GitHub上新建仓库，注意仓库名必须为 xxx.github.io 注意这里的xxx必须为你的Github用户名，否则后面访问时为404！</li><li>下载部署到Github上的插件： cnpm install –save hexo-deployer-git</li><li>修改_config.yml文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: 你的github上博客仓库的地址</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li><li>github仓库配置里source选择master分支</li><li>hexo clean-&gt;hexo g-&gt;hexo d</li></ol></li><li>绑定域名<ol><li>阿里云域名-&gt;解析-&gt;添加解析</li><li>设置主机记录@，记录类型为CNAME，记录值是xxx.github.io。表示将<a href="http://xyx6.top这个主域名映射xxx.github.io" target="_blank" rel="noopener">http://xyx6.top这个主域名映射xxx.github.io</a></li><li>在博客的source文件夹下建立一个CNAME的文件,内容写入你的域名</li><li>github仓库点击Setting，找到 Custom domain 添加域名后保存</li><li>hexo clean-&gt;hexo g-&gt;hexo d</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="http://xyx6.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="杂记" scheme="http://xyx6.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue实战之电商后台管理系统</title>
    <link href="http://xyx6.top/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://xyx6.top/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-11T09:46:23.000Z</published>
    <updated>2021-07-09T08:37:06.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>纯前端的项目，后端接口是提供好的，这次用的element-ui来开发，功能好强大，都是封装好的组件，太方便了！</p></blockquote><a id="more"></a><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/login.png" alt><br><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/welcome.png" alt></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/user.png" alt><br><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/useredit.png" alt></p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/role.png" alt><br><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/role2.png" alt><br><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/right.png" alt></p><h2 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/goods.png" alt><br><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/categories.png" alt></p><h2 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/order.png" alt></p><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><p><img src="/2020/09/11/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/echarts.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;纯前端的项目，后端接口是提供好的，这次用的element-ui来开发，功能好强大，都是封装好的组件，太方便了！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://xyx6.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>网络安全</title>
    <link href="http://xyx6.top/2020/08/09/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>http://xyx6.top/2020/08/09/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2020-08-09T15:35:17.000Z</published>
    <updated>2021-07-09T08:55:20.728Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><ul><li>XSS攻击是Web攻击中最常见的攻击方法之一，它是通过对网页注入可执行代码且成功地被浏览器 执行，达到攻击的目的，形成了一次有效XSS攻击。</li><li>XSS一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，有时候还和其他攻击方式同时实施，比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼</li><li>它可以分为两类：反射型和持久型</li><li>反射型XSS攻击场景：用户点击嵌入恶意脚本的链接，攻击者可以获取用户的cookie信息或密码等重要信息，进行恶性操作</li><li>解决方案：开启cookie的HttpOnly属性，禁止客户端JavaScript脚本读取cookie信息</li><li>持久型XSS攻击场景：攻击者提交含有恶意脚本的请求（通常使用script标签），此脚本被保存在数据库中。用户再次浏览页面，包含恶意脚本的页面会自动执行脚本，从而达到攻击效果。这种攻击常见于论坛，博客等应用中</li><li>解决方案：前端提交请求时对一些特殊字符进行转义，或者是后台存储数据时进行特殊字符转义</li></ul><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ul><li><p>CSRF，Cross-site request forgery，跨站请求伪造。这种方式是恶意网站利用浏览器的cookie或服务器的session策略，盗取用户信息，模拟用户向第三方网站发送恶意请求</p></li><li><p>http请求是无状态的，也就是说每次http请求都是独立的无关之前的操作的，但是每次http请求都会将本域下的所有cookie作为http请求头的一部分发送给服务端，所以服务端就根据请求中的cookie存放的sessionid去session对象中找到该用户数据<br><img src="/2020/08/09/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/csrf.png" alt></p></li><li><p>解决方案：提交请求中携带Token，并且每次请求的Token值都是合法的随机数</p></li><li><p><strong><em>CSRF 和 XSS 的区别</em></strong></p></li></ul><ol><li>CSRF是跨站请求伪造;  XSS是跨域脚本攻击。</li><li>CSRF需要用户先登录网站A,获取cookie;  XSS不需要登录。</li><li>CSRF是利用网站A本身的漏洞,去请求网站A的api;  XSS是向网站A注入JS代码,然后执行JS里的代码,篡改网站A的内容。（XSS利用的是站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的网站。你可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。）</li></ol><h1 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h1><ul><li>点击劫持（ClickJacking）是一种视觉上的欺骗手段。大概有两种方式，一是攻击者使用一个透明的iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，此时用户将在不知情的情况下点击透明的iframe页面；二是攻击者使用一张图片覆盖在网页，遮挡网页原有位置的含义</li><li>解决方案： (X-Frame-Options)这个可以说是为了解决ClickJacking而生的<br>是一个HTTP响应头，在现代的浏览器中有一个较好的支持。它就是为了防御用iframe嵌套的点击劫持攻击，该响应头有三个值可选，分别是<ul><li>DENY 表示页面不允许通过iframe的方式展示，（浏览器会拒绝当前页面加载的任何iframe）</li><li>SAMEORIGIN 表示页面可以在相同域名下通过iframe的方式展示,（frame页面的地址只能为同源域名下的页面）</li><li>ALLOW-FROM 表示页面可以在指定来源的iframe中展示</li></ul></li></ul><h1 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h1><ul><li>DDOS：分布式拒绝服务攻击（Distributed Denial of Service），简单说就是发送大量请求是使服务器瘫痪。DDos攻击是在DOS攻击基础上的，可以通俗理解，dos是单挑，而ddos是群殴，因为现代技术的发展，dos攻击的杀伤力降低，所以出现了DDOS，攻击者借助公共网络，将大数量的计算机设备联合起来，向一个或多个目标进行攻击。</li><li>最直接的方法增加带宽。但是攻击者用各地的电脑进行攻击，他的带宽不会耗费很多钱，但对于服务器来说，带宽非常昂贵。</li><li>云服务提供商有自己的一套完整DDoS解决方案，并且能提供丰富的带宽资源</li></ul><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><ul><li>攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，以此来非法获取数据库信息以及对数据库进行操作</li><li>解决方案 :<ol><li>对用户的输入进行校验</li><li>对主要信息加密</li></ol></li></ul><h1 id="DNS挟持"><a href="#DNS挟持" class="headerlink" title="DNS挟持"></a>DNS挟持</h1><ul><li>页面输入url之后，获取原域名的DNS解析权，修改掉原先的ip地址，将DNS指向攻击者的ip地址。（即输入<a href="https://www.baidu.com/时，出来的是别的页面）…后果：用户被诱骗到冒牌网站进行登录等操作导致泄露隐私数据" target="_blank" rel="noopener">https://www.baidu.com/时，出来的是别的页面）…后果：用户被诱骗到冒牌网站进行登录等操作导致泄露隐私数据</a></li><li>解决方案：手动指定DNS服务器地址</li></ul><h1 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h1><ul><li>攻击者会发送给受害者一个合法链接，当链接被点击时，用户被导向一个似是而非的非法网站，从而达到骗取用户信任、窃取用户资料的目的</li><li>解决方案： 对所有的重定向操作进行审核,以避免重定向到一个危险的地方；重定向token,在合法的url上加上token,重定向时进行验证</li></ul><h1 id="控制台注入代码"><a href="#控制台注入代码" class="headerlink" title="控制台注入代码"></a>控制台注入代码</h1><ul><li>不法分子通过各种提示诱骗用户在控制台做一些操作，从而获取用户信息。</li><li>我们最好在控制台对用户进行友好的提示，不要轻易相信这种提示灯</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小本本</title>
    <link href="http://xyx6.top/2020/08/09/%E5%B0%8F%E6%9C%AC%E6%9C%AC/"/>
    <id>http://xyx6.top/2020/08/09/%E5%B0%8F%E6%9C%AC%E6%9C%AC/</id>
    <published>2020-08-09T12:42:05.000Z</published>
    <updated>2021-07-09T08:55:31.205Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>用来记录一些繁杂的东西</p></blockquote><a id="more"></a><h1 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h1><ol><li>定位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父级开启定位 子级相对定位</span><br><span class="line">top：50%;</span><br><span class="line">left：50%;</span><br><span class="line">transform：translate(-50%,-50%); &#x2F;&#x2F;自身的一半</span><br></pre></td></tr></table></figure></li><li>flex<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父容器</span><br><span class="line">display:flex;</span><br><span class="line">justify-content:center; 主轴分配空白</span><br><span class="line">align-item:center; 辅轴分配空白</span><br></pre></td></tr></table></figure></li><li>table-cell<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">父容器</span><br><span class="line">display:table-cell;</span><br><span class="line">vertical-align:middle;</span><br><span class="line">text-align:center;</span><br><span class="line">&#x2F;*父容器必须指定宽高 *&#x2F;</span><br><span class="line">height:500px;</span><br><span class="line">width:500px;</span><br><span class="line">子元素</span><br><span class="line">display:inline-block;</span><br></pre></td></tr></table></figure></li></ol><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ol><li>通过 verticle-align:middle 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">display: inline-block;</span><br><span class="line">vertical-align:middle;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过 display:flex 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父元素display:flex;</span><br><span class="line">子元素align-self:center;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 display:table-cell 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父元素display:table;</span><br><span class="line">子元素display：table-cell;</span><br></pre></td></tr></table></figure><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ol><li><p>通过 margin: 0 auto; text-align: center 实现</p></li><li><p>通过 display:flex 实现</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父元素display:flex;</span><br><span class="line">     flex-direction:column;</span><br><span class="line">子元素align-self:center;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 width:fit-content 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">width:fit-content;</span><br><span class="line">margin: 0 auto ;</span><br><span class="line">text-align: center;</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><ul><li><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。</p><h2 id="1-JSONP-跨域"><a href="#1-JSONP-跨域" class="headerlink" title="1. JSONP 跨域"></a>1. JSONP 跨域</h2></li><li><p>jsonp 的原理就是利用&lt;script&gt;标签没有跨域限制，通过&lt;script&gt;标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而前端拿到 callback 函数返回的数据。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    var script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    script.type &#x3D; &#39;text&#x2F;javascript&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span><br><span class="line">    script.src &#x3D; &#39;http:&#x2F;&#x2F;www.domain2.com:8080&#x2F;login?user&#x3D;admin&amp;callback&#x3D;handleCallback&#39;;</span><br><span class="line">    document.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 回调执行函数</span><br><span class="line">    function handleCallback(res) &#123;</span><br><span class="line">        alert(JSON.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">handleCallback(&#123;&quot;success&quot;: true, &quot;user&quot;: &quot;admin&quot;&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-CORS-跨域资源共享"><a href="#2-CORS-跨域资源共享" class="headerlink" title="2. CORS 跨域资源共享"></a>2. CORS 跨域资源共享</h2><ul><li>普通跨域请求：只服务端设置 Access-Control-Allow-Origin 即可，前端无须设置，若要带 cookie 请求：前后端都需要设置</li><li>跨域到哪个服务器就在哪个服务器上配置响应头<br><img src="/2020/08/09/%E5%B0%8F%E6%9C%AC%E6%9C%AC/cors.png" alt><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var xhr &#x3D; new XMLHttpRequest(); &#x2F;&#x2F; IE8&#x2F;9需用window.XDomainRequest兼容</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前端设置是否带cookie</span><br><span class="line">xhr.withCredentials &#x3D; true;</span><br><span class="line"></span><br><span class="line">xhr.open(&#39;post&#39;, &#39;http:&#x2F;&#x2F;www.domain2.com:8080&#x2F;login&#39;, true);</span><br><span class="line">xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application&#x2F;x-www-form-urlencoded&#39;);</span><br><span class="line">xhr.send(&#39;user&#x3D;admin&#39;);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange &#x3D; function() &#123;</span><br><span class="line">    if (xhr.readyState &#x3D;&#x3D; 4 &amp;&amp; xhr.status &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><ul><li>利用 node + webpack + webpack-devserver 代理接口跨域。在开发环境下，由于 vue 渲染服务和接口代理服务都是 webpack-dev-server 同一个，所以页面与代理接口之间不再跨域，无须设置 headers 跨域信息了。</li><li>不写请求的基础地址都是默认向本地址请求资源，在webpack加proxy配置代理目标的基础路径，就会把请求都代理到目标接口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    module: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: true,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: &#39;&#x2F;login&#39;,</span><br><span class="line">            target: &#39;http:&#x2F;&#x2F;www.domain2.com:8080&#39;,  &#x2F;&#x2F; 代理跨域目标接口</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            cookieDomainRewrite: &#39;www.domain1.com&#39;  &#x2F;&#x2F; 可以为false，表示不修改</span><br><span class="line">        &#125;],</span><br><span class="line">        noInfo: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="TCP-与-UDP"><a href="#TCP-与-UDP" class="headerlink" title="TCP 与 UDP"></a>TCP 与 UDP</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>TCP 面向连接（如打电话要先拨号建立连接）;UDP 是无连接的，即发送数据之前不需要建立连接</li><li>TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付</li><li>TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流;UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 IP 电话，实时视频会议等）</li><li>每一条 TCP 连接只能是点到点的;UDP 支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP 首部开销 20 字节;UDP 的首部开销小，只有 8 个字节</li><li>TCP 的逻辑通信信道是全双工的可靠信道，UDP 则是不可靠信道</li></ol><h2 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h2><ul><li>第一次握手<ul><li>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li></ul></li><li>第二次握手<ul><li>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li></ul></li><li>第三次握手<ul><li>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li></ul></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li>第一次挥手<ul><li>客户端发送一个FIN=M，用来关闭客户端到服务器端的数据传送，客户端进入FIN_WAIT_1状态。意思是说”我客户端没有数据要发给你了”，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。</li></ul></li><li>第二次挥手<ul><li>服务器端收到FIN后，先发送ack=M+1，告诉客户端，你的请求我收到了，但是我还没准备好，请继续你等我的消息。这个时候客户端就进入FIN_WAIT_2 状态，继续等待服务器端的FIN报文。</li></ul></li><li>第三次挥手<ul><li>当服务器端确定数据已发送完成，则向客户端发送FIN=N报文，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入LAST_ACK状态。</li></ul></li><li>第四次挥手<ul><li>客户端收到FIN=N报文后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以发送ack=N+1后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。服务器端收到ACK后，就知道可以断开连接了。客户端等待了2MSL后依然没有收到回复，则证明服务器端已正常关闭，那好，我客户端也可以关闭连接了。最终完成了四次握手。</li></ul></li></ul><h1 id="http-和-https"><a href="#http-和-https" class="headerlink" title="http 和 https"></a>http 和 https</h1><ul><li>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</li><li>HTTPS：是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版，即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。</li><li>HTTPS 协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</li></ul><h2 id="HTTP-与-HTTPS-有什么区别？"><a href="#HTTP-与-HTTPS-有什么区别？" class="headerlink" title="HTTP 与 HTTPS 有什么区别？"></a>HTTP 与 HTTPS 有什么区别？</h2><ul><li>HTTP 协议传输的数据都是未加密的，也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了 SSL（Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了 HTTPS。简单来说，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全。</li></ul><h1 id="两边固定中间自适应的布局"><a href="#两边固定中间自适应的布局" class="headerlink" title="两边固定中间自适应的布局"></a>两边固定中间自适应的布局</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">float实现：</span><br><span class="line">&lt;div style&#x3D;&quot;width:100%; margin:0 auto;&quot;&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div style&#x3D;&quot;width:200px; float:right; background-color:#960&quot;&gt;这是右侧的内容 固定宽度&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div style&#x3D;&quot;width:150px; float:left; background:#6FF&quot;&gt;这是左侧的内容 固定宽度&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div style&#x3D;&quot;margin-left:150px;margin-right:200px; background-color:#9F3&quot;&gt;中间内容，自适应宽度&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">flex实现</span><br><span class="line">.box &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left, .right &#123;</span><br><span class="line">    width: 20px;</span><br><span class="line">    background:  #090;</span><br><span class="line">&#125;</span><br><span class="line">.middle &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    background: #f00;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;middle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="输入-url-地址按下回车会发生什么"><a href="#输入-url-地址按下回车会发生什么" class="headerlink" title="输入 url 地址按下回车会发生什么"></a>输入 url 地址按下回车会发生什么</h1><p>1.输入 url 地址后，首先进行 DNS 解析，将相应的域名解析为 IP 地址； 2.客户端根据 IP 地址去寻找相应的服务器； 3.与服务器进行 TCP 的三次握手；</p><ul><li><p>所谓三次握手就是客户端在请求与服务器相连接时，彼此共计发送了三次数据包，就好比以下的对话：<br>_ 首先，需要明确的是，三次握手是客户端先发起请求。<br>_ （第一次）客户端：hi，服务器，在吗？我想和你建立连接，你能收到我的消息吗？（此时客户端给服务端发送了一个数据包和发送序号，即 SYN=1，Seq=X）<br>_ （第二次）服务器：hi，客户端，我在呢，我收到你的消息了，我们可以建立连接，你能收到我答复的消息吗？（此时服务端发送 syn+ack 报文，并置发送序号为 Y，再确认序号为 X+1）<br>_ （第三次）客户端：我收到你的答复了，很开心能和你建立连接。（此时客户端发送 ack 报文，并置发送序号为 Z，再确认序号为 Y+1）</p><p>4.客户端找到相应的资源库；</p><p>5.根据资源库返回页面信息；</p><p>6.浏览器根据自身的执行机制解析页面；</p><p>7.最后服务器将解析信息返回给客户端，进行TCP的四次挥手</p></li></ul><h1 id="type-of-与-instance-of"><a href="#type-of-与-instance-of" class="headerlink" title="type of 与 instance of"></a>type of 与 instance of</h1><ul><li>typeof 是判断参数是什么类型的实例，返回值为说明运算数类型的字符串。<ul><li>返回值结果：“number”、“string”、“boolean”、“object”、“function”、“undefined”</li><li>若参数为引用类型，始终返回“object”，对于 Array、null 始终返回“object”</li></ul></li><li>instanceof 是用来判断一个对象在其原型链中是否存在一个构造函数的 prototype 属性<ul><li>a instanceof b：判断 a 是否为 b 的实例，可以用于继承关系中</li></ul></li></ul><h1 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h1><ul><li><p>html 加载时发生了什么</p><ul><li><p>在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。</p></li><li><p>DOM Tree 和样式结构体 （浏览器把所有样式【用户定义的CSS和用户代理】解析成样式结构体） 组合后构建render tree, render tree类似于DOM tree，但区别很大，因为render tree能识别样式，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。我自己简单的理解就是DOM Tree和我们写的CSS结合在一起之后，渲染出了render tree。</p></li></ul></li><li><p>什么是回流</p><ul><li>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。</li></ul></li><li><p>什么是重绘</p><ul><li>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</li></ul></li><li><p>区别：</p><ol><li>回流必将引起重绘，而重绘不一定会引起回流。</li></ol><ul><li>比如：只有颜色改变的时候就只会发生重绘而不会引起回流</li></ul><ol start="2"><li>当页面布局和几何属性改变时就需要回流</li></ol><ul><li>比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</li></ul></li></ul><h1 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h1><ol><li><p>cookie数据存放在客户的浏览器上(客户端),session数据放在服务器上</p><ul><li><p>cookie不是很安全,别人可以分析存放在本地的cookie并进行cookie 欺骗,如果主要考虑到安全应当使用session</p></li><li><p>session会在一定时间内保存在服务器上.当访问增多,会比较占用你服务器的性能,如果主要考虑到减轻服务器性能方面,应当使用cookie</p></li></ul></li><li><p>单个cookie在客户端的限制是3K,就是说一个站点在客户端存放的cookie不能3K</p><ul><li>将登陆信息等重要信息存放为session;其他信息如果需要保留,可以放在 cookie 中</li></ul></li><li><p>session不能区分路径,同一个用户在访问一个网站期间,所有的session在任何一个地方都可以访问到.而cookie中如果设置了路径参数,那么同一个网站中不同路径下的cookie互相是访问不到的.cookie只能是子路径访问父路径设置的cookie</p></li></ol><h2 id="localStorage和sessionStorage区别"><a href="#localStorage和sessionStorage区别" class="headerlink" title="localStorage和sessionStorage区别"></a>localStorage和sessionStorage区别</h2><ul><li><p>localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。</p></li><li><p>他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。</p></li><li><p>localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。</p></li><li><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。</p></li></ul><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><ul><li>token 也称作令牌，由uid+time+sign[+固定参数]</li><li>token 的认证方式类似于临时的证书签名, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。</li><li>token在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中</li><li>token认证流程<ul><li>token 的认证流程与cookie很相似</li><li>用户登录，成功后服务器返回Token给客户端。</li><li>客户端收到数据后保存在客户端</li><li>客户端再次访问服务器，将token放入headers中</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie</li><li>cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。</li><li>token也类似一个令牌，无状态，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。需要开发者手动添加。</li></ul><h1 id="node中import和require的区别"><a href="#node中import和require的区别" class="headerlink" title="node中import和require的区别"></a>node中import和require的区别</h1><ul><li>import和require都是被模块化所使用</li><li>require是运行时调用，所以require理论上可以运用在代码的任何地方</li><li>import是编译时调用，所以必须放在文件开头</li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p><a href="https://blog.csdn.net/qq_42992643/article/details/82959720" target="_blank" rel="noopener">https://blog.csdn.net/qq_42992643/article/details/82959720</a></p><h1 id="深克隆和浅克隆"><a href="#深克隆和浅克隆" class="headerlink" title="深克隆和浅克隆"></a>深克隆和浅克隆</h1><ul><li>浅克隆只是改变了指针的指向，没有开辟新的内存空间，改变值后原有的值也会发生改变</li><li>深克隆是先把对象转化成json数据JSON.stringify(obj)，然后在解析成对象JSON.parse，完整JSON.parse(JSON.stringify(obj))，是开辟了新的内存空间存数据，改变值后原有值也不变。<strong><em>但是对函数、正则、时间对象、数字对象的时候会不好用,遇到他们时需要特殊处理来过滤</em></strong></li></ul><h1 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h1><p><img src="/2020/08/09/%E5%B0%8F%E6%9C%AC%E6%9C%AC/%E5%BE%AE%E4%BB%BB%E5%8A%A1%E5%AE%8F%E4%BB%BB%E5%8A%A1.png" alt></p><ul><li>js是单线程的，浏览器是多线程的</li><li>先执行主线程，执行完主线程再执行微任务，最后执行宏任务</li><li>宏任务：setTimeout，setInterval，整体代码script，I/O</li><li>微任务：Promise，process.nextTick</li></ul><h1 id="promise和async-await"><a href="#promise和async-await" class="headerlink" title="promise和async/await"></a>promise和async/await</h1><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><ul><li>promice的思想就是每一个异步任务返回一个promise对象，该对象有一个then方法，通过.then()的方法可进行链式调用,允许指定回调函数，Promice的出现大大改善了异步变成的困境，避免出现回调地狱（数作为参数层层嵌套），嵌套层级得到改善。</li><li>API<ul><li>Promise.resolve()</li><li>Promise.reject()</li><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.all()  // 所有的完成  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  function promiseDemo () &#123;</span><br><span class="line">    Promise.all([A, B]).then(function (res) &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;A,B</span><br><span class="line">A请求、B请求同时发,两条响应都收到后再执行then</span><br></pre></td></tr></table></figure></li><li>Promise.race() // 竞速，完成一个即执行then  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function promiseDemo () &#123;</span><br><span class="line">    Promise.race([A, B]).then(function (res) &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h2></li></ul></li><li>Async/await建立于Promise之上</li><li>async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖</li><li>如果要实现并发多个请求，可以把函数存到数组中，在调用array.map实现</li></ul><h1 id="var-let-const的区别"><a href="#var-let-const的区别" class="headerlink" title="var,let,const的区别"></a>var,let,const的区别</h1><ul><li>var声明变量存在变量提升，let/const不存在</li><li>var不存在块级作用域。let和const存在块级作用域，顾名思义，就是只在当前代码块起作用</li><li>var允许重复声明变量，后一个变量会覆盖前一个变量。let和const在同一作用域不允许重复声明变量，会报错（正常情况下三者都不能重复声明变量，但是编译器会忽略重复声明的var，所以var可以）</li><li>const/let大部分特性一样，不同的是：<ul><li>const声明时必须赋值且只能赋值一次，不能修改</li><li>如果const声明的是复合类型数据，可以修改其属性</li></ul></li></ul><h1 id="flex-flex-1"><a href="#flex-flex-1" class="headerlink" title="flex/flex:1"></a>flex/flex:1</h1><ul><li>flex属性= flex-grow(放大) + flex-shrink(缩小) + flex-basis(基础)</li><li>flex：1实际是flex-grow:1表示父元素有剩余空间时是否放大</li></ul><h1 id="Vue双向绑定原理"><a href="#Vue双向绑定原理" class="headerlink" title="Vue双向绑定原理"></a>Vue双向绑定原理</h1><ul><li>VUE的双向绑定通过数据劫持结合发布者-订阅者模式的方式来实现</li><li>利用object.defineProperty（）重写对象的set方法和get方法。通过这两种方法对data中的数据进行监控，当修改数据值时，触发set；当访问数据值时，触发get。</li><li>监控数据变化是为了更新页面，更新变化数据对应的DOM节点</li><li>完成上述要求需要底层虚拟DOM的支持</li><li>vue3中用proxy来监听数据，只需要监听对象，对象中的属性发生改变自动捕获。</li></ul><h1 id="Vue中的虚拟dom及diff算法"><a href="#Vue中的虚拟dom及diff算法" class="headerlink" title="Vue中的虚拟dom及diff算法"></a>Vue中的虚拟dom及diff算法</h1><ul><li>vue2引入了虚拟dom，渲染速度比vue1提高了2-4倍，而且大大降低了内存消耗</li><li>模板转换成视图的过程<ol><li>将模板编译转换成渲染函数，执行渲染函数得到一个虚拟节点树</li><li>对数据进行操作的时候，会触发监听函数，然后watch对象会将新旧虚拟节点进行对比，然后根据对比结果进行dom操作来更新视图</li></ol><ul><li>简单点讲，在Vue的底层实现上，Vue将模板编译成虚拟DOM渲染函数。在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应到DOM操作上<br><img src="/2020/08/09/%E5%B0%8F%E6%9C%AC%E6%9C%AC/%E8%99%9A%E6%8B%9Fdom.jpg" alt></li></ul></li><li>概念：<ol><li>渲染函数：渲染函数是用来生成Virtual DOM的。Vue推荐使用模板来构建我们的应用界面，在底层实现中Vue会将模板编译成渲染函数</li><li>VNode 虚拟节点：它可以代表一个真实的 dom 节点。通过 createElement 方法能将 VNode 渲染成 dom 节点。简单地说，vnode可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点</li><li>patch(也叫做patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。</li></ol></li><li>虚拟dom是什么？<ul><li>虚拟dom是一颗以js对象（VNode节点）为基础的树，用对象属性来描述节点。它实际上是对真实dom的抽象，最后通过一系列操作可以使这棵树映射到真实环境上。虚拟dom就相当于缓存，介于cpu（JS）和硬盘（dom）之间,js只操作虚拟dom，最后再把变更的地方写入真实dom中。</li><li>虚拟dom的最终目标是将虚拟节点渲染到视图上，如果直接用虚拟节点覆盖旧节点，会有很多不必要的dom操作，为了避免这种情况，虚拟dom在虚拟节点映射到视图的过程中，将虚拟节点与上一次的旧虚拟节点做对比，找到需要更新的节点进行dom操作，从而避免不必要的操作。</li><li>其实虚拟DOM在Vue.js主要做了两件事：<ol><li>提供与真实DOM节点所对应的虚拟节点vnode</li><li>将虚拟节点vnode和旧虚拟节点oldVnode进行对比，然后更新视图</li></ol></li><li>模板 → 渲染函数 → 虚拟DOM树 → 真实DOM</li></ul></li><li>diff算法<ul><li>为了实现高效的DOM操作，一套高效的虚拟DOM diff算法显得很有必要。我们通过patch 的核心—-diff 算法，找出本次DOM需要更新的节点来更新，其他的不更新。思想是仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。</li><li>diff 算法包括几个步骤：<ol><li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>把所记录的差异应用到所构建的真正的DOM树上，视图就更新了</li></ol></li></ul></li></ul><h1 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h1><ul><li>computed是用于定义基于数据之上的数据；并且computed是有缓存的，在数据还没有变化时访问时，计算属性会立即返回缓存中之前计算的结果。</li><li>watch是在某个数据变化时做一些事情，可以是调用函数，也可以像computed返回数据，而且监听的是一个参数，而computed可以依赖多个参数。</li></ul><h1 id="MVC-MVVM"><a href="#MVC-MVVM" class="headerlink" title="MVC/MVVM"></a>MVC/MVVM</h1><ul><li>mvc用户对View的操作交给了Controller处理，在Controller中响应View的事件调用Model的接口对数据进行操作，一旦Model发生变化便通知相关视图进行更新。</li><li>在原生的html+js中，可以将html看成view;js看成controller，负责处理用户与应用的交互，响应对view的操作（对事件的监听），调用Model对数据进行操作，完成model与view的同步（根据model的改变，通过选择器对view进行操作）;将js的ajax当做Model，也就是数据层，通过ajax从服务器获取数据。</li><li>Model的对象不只包含数据，也有对属性（name）的监听事件</li><li>MVVM与MVC最大的区别就是：它实现了View和Model的自动同步，也就是当Model的属性改变时，我们不用再自己手动操作Dom元素，来改变View的显示，而是改变属性后该属性对应View层显示会自动改变</li><li>Vue实例中的data相当于Model层，而ViewModel层的核心是Vue中的双向数据绑定，即Model变化时VIew可以实时更新，View变化也能让Model发生变化</li><li>MVVM比MVC精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作DOM元素</li></ul><h1 id="webpack-1"><a href="#webpack-1" class="headerlink" title="webpack"></a>webpack</h1><ul><li>webpack有五大核心概念：<ol><li>entry：指示从哪个文件开始打包</li><li>output：指示打包的文件输出到哪里去</li><li>loader：因为webpack本身只能打包js文件，所以需要loader把其他文件转化成js文件加载进来</li><li>plugin：用于拓展webpack的功能，它可以执行更多的任务，从打包优化到压缩，一直到重新定义变量等</li><li>model：model指示webpack使用的相应模式的配置，分为开发模式和生产模式</li></ol></li></ul><h1 id="Java和JavaScript"><a href="#Java和JavaScript" class="headerlink" title="Java和JavaScript"></a>Java和JavaScript</h1><ul><li>Java和js的区别<ol><li>Java是面向对象的语言，即使是简单的程序也需要设计对象，JavaScript是脚本语言，他是种基于对象和事件驱动的语言</li><li>Java在执行之前必须编译，JavaScript不需要，可以有浏览器直接解释执行</li><li>Java的所有变量在编译之前必须做声明，JavaScript不需要</li><li>代码格式不一样</li></ol></li><li>js怎么实现Java的继承<ol><li>使用对象冒充（this.method）,将parent指向的对象赋给this.method,然后执行this.method，最后执行完再销毁就行了</li><li>使用call方法，parent.call(this,父类对象)，改变this指向</li><li>也可使用apply方法改变this指向</li><li>原型链方式，父类的函数和变量放在原型对象上，子类通过实例化父类来继承函数和变量</li></ol></li><li>js实现public和private<ul><li>public<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过初始化实例变量来给对象添加public变量</span><br><span class="line">functin Container(param) &#123;   </span><br><span class="line">this.member &#x3D; param;   </span><br><span class="line">&#125;  </span><br><span class="line">var myContainer &#x3D; new Container(&#39;abc&#39;)，则myContainer.member为&#39;abc&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;函数通过加在原型链来实现public</span><br><span class="line">Container.prototype.stamp &#x3D; function (string) &#123;   </span><br><span class="line">return this.member + string;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Private<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">普通的var变量就是private</span><br><span class="line">private函数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;private methd  </span><br><span class="line">function getSex()&#123;  </span><br><span class="line">    return sex;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">function getSalary()&#123;  </span><br><span class="line">    return salary;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">this.display &#x3D; function()&#123;  </span><br><span class="line">    document.write(this.getName() + &quot;---&quot; + this.getAge() + &quot;---&quot; + getSex() + &quot;----&quot; + getSalary());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;用来记录一些繁杂的东西&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>节流和防抖动</title>
    <link href="http://xyx6.top/2020/08/09/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E5%8A%A8/"/>
    <id>http://xyx6.top/2020/08/09/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E5%8A%A8/</id>
    <published>2020-08-09T07:08:54.000Z</published>
    <updated>2021-07-09T08:55:11.061Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><ul><li>节流(throttle)的意思就是水龙头关小点, 频率不要那么高</li><li><strong>节流是固定时间内只触发一次函数</strong></li><li>原理是通过判断是否到达一定时间来触发函数，若没到达规定时间则使用计时器延后，而下一事件重新设定计时器<br><img src="/2020/08/09/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E5%8A%A8/throttling.png" alt><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function throttle (func, wait &#x3D; 0) &#123;</span><br><span class="line">  let timer</span><br><span class="line">  let start</span><br><span class="line">  let now</span><br><span class="line"> </span><br><span class="line">  return function () &#123;</span><br><span class="line">    now &#x3D; new Date().getTime()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果不是第一次, 并且时间间隔还没有过去wait毫秒就清除定时器重新计时</span><br><span class="line">    if (start &amp;&amp; now - start &lt; wait) &#123;      </span><br><span class="line">      if (timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">      &#125;</span><br><span class="line">      timer &#x3D; setTimeout (() &#x3D;&gt; &#123;</span><br><span class="line">        func()</span><br><span class="line">        start &#x3D; now</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#x2F;&#x2F; 如果是第一次且时间间隔过了wait毫秒，就执行函数 </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">      func()</span><br><span class="line">      start &#x3D; now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="防抖动"><a href="#防抖动" class="headerlink" title="防抖动"></a>防抖动</h1><ul><li>维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发函数时就会取消之前的定时器，重新设置，这样一来只有最后一次操作会被触发<br><img src="/2020/08/09/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E5%8A%A8/debounce.png" alt><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function debounce (func, wait &#x3D; 0) &#123;</span><br><span class="line">  let timer</span><br><span class="line"> </span><br><span class="line">  return function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果触发函数就清除之前的定时器重新计时</span><br><span class="line">    &#x2F;&#x2F; 只有最后一次操作触发</span><br><span class="line">    if (timer) &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      func()</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>节流和防抖动最大的区别就是，节流函数不管是事件触发的多频繁，都会保证在规定时间内一定会执行一次事件处理函数，而防抖动只是在最后一次事件后才只触发一次函数*</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="节流" scheme="http://xyx6.top/tags/%E8%8A%82%E6%B5%81/"/>
    
      <category term="防抖动" scheme="http://xyx6.top/tags/%E9%98%B2%E6%8A%96%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>性能优化</title>
    <link href="http://xyx6.top/2020/08/09/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://xyx6.top/2020/08/09/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-08-09T05:35:44.000Z</published>
    <updated>2021-07-09T08:55:38.010Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h1><h2 id="http请求优化（减少cookie体积，减少http请求次数）"><a href="#http请求优化（减少cookie体积，减少http请求次数）" class="headerlink" title="http请求优化（减少cookie体积，减少http请求次数）"></a>http请求优化（减少cookie体积，减少http请求次数）</h2><ol><li>合并文件：合并文件是通过把所有的脚本放到一个文件中来减少HTTP请求的方法，例如可以简单地把所有的CSS文件都放入一个样式表中。当脚本 或者样式表在不同页面中使用时需要做不同的修改</li><li>雪碧图：把所有的背景图像都放到一个图片文件中，然后通过CSS的background-image和background-position属性来显示图片的不同部分</li><li>cookie内的有关信息是通过HTTP文件头来在web服务器和浏览器之间进行交流的。因此保持coockie尽可能的小以减少用户的响应时间十分重要</li></ol><h2 id="设置Expires和Cache-Control"><a href="#设置Expires和Cache-Control" class="headerlink" title="设置Expires和Cache-Control"></a>设置Expires和Cache-Control</h2><ul><li>已缓存资源不再发起http请求，即HTTP的Expires和Cache-Control。对一个网站而言，CSS、JavaScript、图片等静态资源更新的频率都比较低，而这些文件又几乎是每次HTTP请求都需要的，如果将这些文件缓存在浏览器中，可以极好的改善性能。通过设置http头中的cache-control和expires的属性，可设定浏览器缓存，将静态内容设为永不过期，或者很长时间后才过期。</li></ul><h2 id="减少DNS查询次数"><a href="#减少DNS查询次数" class="headerlink" title="减少DNS查询次数"></a>减少DNS查询次数</h2><ul><li>DNS查询也消耗响应时间，若网页内容来自各个不同的域名，则客户端首次解析这些域名需要消耗一定的时间，但由于DNS查询结果会缓存在本地系统和浏览器中一段时间（IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟），所以DNS查询一般只是对首次访问时的速度有影响。</li></ul><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><ul><li>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式。</li><li>用户滚动到它们之前，可视区域外的图像不会加载。这与图像预加载相反，在长网页上使用延迟加载将使网页加载更快。</li><li>在某些情况下，它还可以帮助减少服务器负载。常适用图片很多，页面很长的电商网站场景中。</li><li>优点<ul><li>能提升用户的体验，用户打开像手机淘宝长页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长，严重影响用户体验。</li><li>减少无效资源的加载，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li><li>防止并发加载的资源过多会阻塞js的加载，影响网站的正常使用。</li></ul></li><li>原理<ul><li>首先将页面上的图片的 src 属性设为空字符串，而图片的真实路径则设置在data-original属性中。</li><li>当页面滚动的时候需要去监听scroll事件，在scroll事件的回调中，判断我们的懒加载的图片是否进入可视区域,如果图片在可视区内将图片的 src 属性设置为data-original 的值，这样就可以实现懒加载。</li></ul></li></ul><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><ul><li>为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。</li><li>懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载。</li><li>常用的懒加载方式有两种：即使用vue异步组件 和 ES中的import　<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2></li><li>预加载简单来说就是将所有所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。</li><li>优点<ul><li>在网页全部加载之前，对一些主要内容进行加载，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，直到所有内容加载完毕。</li></ul></li><li>原理<ul><li>用CSS和JavaScript实现预加载，html中img标签最初设置为display:none；</li><li>仅使用JavaScript实现预加载，js脚本中使用image对象动态创建好图片；</li><li>使用Ajax实现预加载，使用XMLHttpRequest对象可以更加精细的控制预加载过程，缺点是无法跨域：</li></ul></li></ul><h2 id="使用cdn"><a href="#使用cdn" class="headerlink" title="使用cdn"></a>使用cdn</h2><ul><li>将静态资源存放到cdn服务器上直接请求，无需下载，提高网页速度</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="css置顶"><a href="#css置顶" class="headerlink" title="css置顶"></a>css置顶</h2><ul><li>在所有CSS加载并解析完之后才会呈现内容，减少白屏</li><li>现代浏览器为了更好的用户体验,渲染引擎将尝试尽快在屏幕上显示的内容。它不会等到所有HTML解析之前开始构建和布局渲染树。部分的内容将被解析并显示。也就是说浏览器能够渲染不完整的dom树和css结合，尽快的减少白屏的时间</li></ul><h2 id="避免css表达式"><a href="#避免css表达式" class="headerlink" title="避免css表达式"></a>避免css表达式</h2><ul><li>CSS 表达式虽然强大，但是会给浏览器带来很严重的性能问题，并拖慢网页的加载速度</li><li>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次</li></ul><h2 id="用link代替import"><a href="#用link代替import" class="headerlink" title="用link代替import"></a>用link代替import</h2><ul><li>当页面被加载时，link引用的CSS会同时被加载，而@import引用的CSS则是等待主页面全部被加载完后才会被加载，所以当网速较慢时，可能会只出现页面而没有样式，等一段时间后样式才会被加载出来</li></ul><h2 id="减少重绘与回流"><a href="#减少重绘与回流" class="headerlink" title="减少重绘与回流"></a>减少重绘与回流</h2><ul><li>CSS（ui渲染）和JavaScript（js解析）会相互阻塞</li><li>前端性能优化与重绘与回流有关系的原因是：频繁的触发重绘与回流，会导致UI频繁渲染，最终会导致js变慢，会导致页面性能变差</li></ul><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="js置底"><a href="#js置底" class="headerlink" title="js置底"></a>js置底</h2><ul><li>js 会阻碍浏览器的解析，解析遇到js会停止渲染，优先去加载或者执行js,处理完毕后再继续渲染，js放在最后面就不会影响前面的页面的渲染</li></ul><h2 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h2><ul><li>对js、css、图片等进行压缩，尽可能减小文件的大小，减少文件下载的时间，从而减少网页响应的时间</li></ul><h2 id="减少dom访问"><a href="#减少dom访问" class="headerlink" title="减少dom访问"></a>减少dom访问</h2><ul><li>使用JavaScript访问DOM元素比较慢</li></ul><h1 id="用户感知优化"><a href="#用户感知优化" class="headerlink" title="用户感知优化"></a>用户感知优化</h1><ul><li>骨架屏<ul><li>在数据加载时显示骨架，优化用户体验</li></ul></li><li>缓存路由组件keep-alive<ul><li>默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的</li><li>keep-alive可以缓存路由组件对象, 可以提高用户体验</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue实战之外卖平台</title>
    <link href="http://xyx6.top/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/"/>
    <id>http://xyx6.top/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/</id>
    <published>2020-07-30T04:11:18.000Z</published>
    <updated>2021-07-09T08:50:07.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>基于vue实现的一个外卖移动端项目</p></blockquote><a id="more"></a><h1 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/1.png" alt></p><h2 id="商家详情页"><a href="#商家详情页" class="headerlink" title="商家详情页"></a>商家详情页</h2><h3 id="菜品列表"><a href="#菜品列表" class="headerlink" title="菜品列表"></a>菜品列表</h3><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/2.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/2.1.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/2.2.png" alt></p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/3.png" alt></p><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/4.png" alt></p><h3 id="商家信息"><a href="#商家信息" class="headerlink" title="商家信息"></a>商家信息</h3><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/5.png" alt></p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/6.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/6.1.png" alt></p><h2 id="登陆注册"><a href="#登陆注册" class="headerlink" title="登陆注册"></a>登陆注册</h2><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/7.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/71.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/8.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/81.png" alt></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/db1.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/db2.png" alt><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/db3.png" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li><p>页面：vue, vue-router, vue-lazyload, styls</p><ul><li>router：路由器页面跳转，开发单页应用</li><li>lazyload：图片懒加载，从接口获取图片数据有个过程用一个加载动画填补</li><li>styls：css预编译器，不过真的不推荐这个，styls是用缩进控制来取代大括号小括号，有时候代码格式化就会导致一些样式失效，还是推荐less，两者语法大同小异</li></ul></li><li><p>插件：better-scroll, swiper, mint-ui, moment</p><ul><li>Bscroll: 实现页面滑动</li><li>swiper：实现轮播图</li><li>mint-ui：构建界面</li><li>moment：处理日期格式</li></ul></li><li><p>数据：ajax, axios, mock, vuex, postman</p><ul><li>ajax,axios: 实现前后台交互</li><li>mock：模拟数据库，拦截Ajax请求返回自定义格式的数据</li><li>vuex：对数据进行全局的统一管理</li><li>postman：测试后端接口</li></ul></li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>Node+Express <ul><li>用express搭建后台路由</li></ul></li><li>Mongodb+Mongoose<ul><li>用mongoose操作mongodb数据库</li></ul></li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p><strong><em>这个项目是跟着视频教程做的，主要是想找个项目练手来巩固一下知识，静态页面是直接拿的别人的，不得不说自己做静态页面还是比较花时间的，以后再找点时间来练练</em></strong><br></p><p><strong><em>这次主要是想知道一个全栈项目的具体的工作流程，后端怎么读数据，怎么定义接口。怎么把数据发送出去等等，还有前端怎么实现一些动画效果，怎么拿到数据，怎么对数据进行处理，怎么渲染到页面上等等</em></strong><br></p><p><strong><em>这次的项目本来教的是后端从json文件中获取数据，然后我加了一些改动，把json文件数据插到数据库，然后在从数据库里面读取，还有一些从接口里读到的数据，我能实现的，也都搞到数据库里</em></strong><br><br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/211.png" alt><br><br><strong><em>项目其实最后没有做完，还有支付和订单没有完成，教程也到这里就结束了，以前了解过用支付宝的接口，后面如果有时间的话考虑再把项目完善一下，到这里我也能算上接触到前端的一名小白了吧哈哈哈，虽然还有很多东西没学 ( ╥﹏╥ )</em></strong></p><ul><li>最后放一个小玩意（这个比较简单就不另写博客<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。）<br>(<a href="http://www.xyx6.top:8080/Vuemusic/" target="_blank" rel="noopener">http://www.xyx6.top:8080/Vuemusic/</a>)<br><img src="/2020/07/30/Vue%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%96%E5%8D%96%E5%B9%B3%E5%8F%B0/music.png" alt><h1 id="taking-my-time-step-by-step"><a href="#taking-my-time-step-by-step" class="headerlink" title="taking my time,step by step!"></a>taking my time,step by step!</h1></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;基于vue实现的一个外卖移动端项目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://xyx6.top/categories/Vue/"/>
    
    
      <category term="MongoDB" scheme="http://xyx6.top/tags/MongoDB/"/>
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
      <category term="Node.js" scheme="http://xyx6.top/tags/Node-js/"/>
    
      <category term="Vuex" scheme="http://xyx6.top/tags/Vuex/"/>
    
      <category term="Mongoose" scheme="http://xyx6.top/tags/Mongoose/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期函数</title>
    <link href="http://xyx6.top/2020/07/23/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>http://xyx6.top/2020/07/23/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-23T11:33:42.000Z</published>
    <updated>2021-07-09T08:54:09.534Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h1 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h1><ul><li>从 Vue 实例的创建，运行，到销毁期间，总是伴随着各种各样的事件，这些事件，被称为生命周期</li><li>生命周期函数=生命周期钩子=生命周期事件<br><img src="/2020/07/23/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/live.png" alt></li></ul><h1 id="主要的生命周期函数分类"><a href="#主要的生命周期函数分类" class="headerlink" title="主要的生命周期函数分类"></a>主要的生命周期函数分类</h1><h2 id="创建期间的生命周期函数："><a href="#创建期间的生命周期函数：" class="headerlink" title="创建期间的生命周期函数："></a>创建期间的生命周期函数：</h2><ul><li>beforeCreate：实例在内存中刚被创建出来，此时还没有初始化好data和methods</li><li>created：实例已经在内存中创建完成，此时data和methods已经创建完成，此时还没有开始编译模板</li><li>beforeMount：此时已经完成模板的编译，但是还没有挂载到页面中</li><li>mounted：此时已经将编译好的模板，挂载到页面指定的容器中显示</li></ul><h2 id="运行期间的生命周期函数："><a href="#运行期间的生命周期函数：" class="headerlink" title="运行期间的生命周期函数："></a>运行期间的生命周期函数：</h2><ul><li>beforeUpdate：状态更新之前执行此函数，此时data中的状态值是新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完成后调用此函数，此时data中的状态值和界面上显示的数据都是已经完成更新了的，界面已经被重新渲染好了</li></ul><h2 id="销毁期间的生命周期函数："><a href="#销毁期间的生命周期函数：" class="headerlink" title="销毁期间的生命周期函数："></a>销毁期间的生命周期函数：</h2><ul><li>beforeDestroy：实例销毁之前调用，在这一步，实例依然完全可用</li><li>destroyed：Vue实例销毁调用，调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器都会被移除，所有的子实例也会被销毁</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
      <category term="Vue生命周期" scheme="http://xyx6.top/tags/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://xyx6.top/2020/07/22/Vue/"/>
    <id>http://xyx6.top/2020/07/22/Vue/</id>
    <published>2020-07-22T05:51:02.000Z</published>
    <updated>2021-07-18T17:32:34.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>中国最火的一套构建用户界面的渐进式框架</p></blockquote><a id="more"></a><h1 id="Vue基本认识"><a href="#Vue基本认识" class="headerlink" title="Vue基本认识"></a>Vue基本认识</h1><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">中文官网</a></p><h2 id="Vue特点"><a href="#Vue特点" class="headerlink" title="Vue特点"></a>Vue特点</h2><ol><li>遵循MVVM模式</li><li>编码简洁,体积小,运行效率高,适合移动/PC端开发</li><li>它本身只关注UI,可以轻松引入vue插件或其它第三库开发项目</li></ol><h2 id="Vue扩展插件"><a href="#Vue扩展插件" class="headerlink" title="Vue扩展插件"></a>Vue扩展插件</h2><ol><li>vue-cli:vue脚手架</li><li>vue-resource(axios):ajax请求</li><li>vue-router:路由</li><li>vuex:状态管理</li><li>vue-lazyload:图片懒加载</li><li>vue-scroller:页面滑动相关</li><li>mint-ui:基于vue的UI组件库(移动端)</li><li>element-ui:基于vue的UI组件库(PC端)</li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 引入vue.js</span><br><span class="line">2. 创建Vue实例对象(vm),指定选项(配置)对象</span><br><span class="line">    * el:指定dom标签容器的选择器</span><br><span class="line">    * data:指定初始化状态数据的对象&#x2F;函数,返回一个对象</span><br><span class="line">3. 在页面模板中使用&#123;&#123;&#125;&#125;或vue指令</span><br></pre></td></tr></table></figure><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="/2020/07/22/Vue/mvvm.png" alt></p><ul><li>model: 模型，数据对象data</li><li>view：视图，模板页面</li><li>viewmodel：实体模型，vue的实例</li></ul><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><h3 id="v-text-v-html-指定标签体"><a href="#v-text-v-html-指定标签体" class="headerlink" title="v-text/v-html: 指定标签体"></a>v-text/v-html: 指定标签体</h3><ul><li>v-text : 当作纯文本，默认没有闪现属性   </li><li>v-html : 将value作为html标签来解析</li></ul><h3 id="v-if-v-else-v-show-显示-隐藏元素"><a href="#v-if-v-else-v-show-显示-隐藏元素" class="headerlink" title="v-if v-else v-show: 显示/隐藏元素"></a>v-if v-else v-show: 显示/隐藏元素</h3><ul><li>v-if : 如果vlaue为true, 当前标签会输出在页面中</li><li>v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中</li><li>v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none</li></ul><h3 id="v-for-遍历"><a href="#v-for-遍历" class="headerlink" title="v-for : 遍历"></a>v-for : 遍历</h3><ul><li>遍历数组 : v-for=”(person, index) in persons”   </li><li>遍历对象 : v-for=”value in person”   $key</li><li>变异方法：vue对原生js中数组的方法进行了重新的定义，vue中的数组方法加上了监听，所以会触发视图的更新</li></ul><h3 id="v-on-绑定事件监听"><a href="#v-on-绑定事件监听" class="headerlink" title="v-on : 绑定事件监听"></a>v-on : 绑定事件监听</h3><ul><li>v-on:事件名, 可以缩写为: @事件名</li><li>监视具体的按键: @keyup.keyCode   @keyup.enter只有少数的按键才有</li><li>停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent</li><li>隐含对象: $event就代表事件对象，可以通过event.target获取对象属性</li></ul><h3 id="v-bind-强制绑定解析表达式"><a href="#v-bind-强制绑定解析表达式" class="headerlink" title="v-bind : 强制绑定解析表达式"></a>v-bind : 强制绑定解析表达式</h3><ul><li>html标签属性是不支持表达式的, 就可以使用v-bind</li><li>可以缩写为:  :id=’name’</li><li>:class<ul><li>:class=”a”字符串</li><li>:class=”{classA : isA, classB : isB}”对象</li><li>:class=”[classA, classB]”数组</li></ul></li><li>:style<ul><li>:style=”{color : color}”</li></ul></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li>双向数据绑定</li><li>自动收集用户输入数据</li></ul><h3 id="ref-标识某个标签"><a href="#ref-标识某个标签" class="headerlink" title="ref : 标识某个标签"></a>ref : 标识某个标签</h3><ul><li>ref=’xxx’</li><li>读取得到标签对象: this.$refs.xxx</li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>防止闪现(即在加载时会短暂的出现HTML代码)</li><li>与css配合，在解析之前匹配一个标签，解析后就不存在了</li><li>在需要匹配的标签内加v-cloak，并且对v-cloak添加样式{display:none}</li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ol><li>注册全局指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;my-directive&#39;,function(el,binding)&#123; </span><br><span class="line">    &#x2F;&#x2F;指令名v-省略，el：指令属性所在的标签对象，binding:包含指令相关信息数据的对象</span><br><span class="line">    el.innerHTML&#x3D;binding.value.toupperCase()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>注册局部指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">&#39;my-directive&#39;:&#123;</span><br><span class="line">    bind(el,binding)&#123;</span><br><span class="line">        el.innerHTML&#x3D;binding.value.toupperCase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用指令<br>v-my-directive=’xxx</li></ol><h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><ul><li>Vue插件是一个包含install方法的对象</li><li>通过install方法给Vue或Vue实例添加方法,定义全局指令等<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">举例： </span><br><span class="line">(function (window) &#123;</span><br><span class="line">  const MyPlugin &#x3D; &#123;&#125;</span><br><span class="line">  MyPlugin.install &#x3D; function (Vue, options) &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 添加全局方法或属性</span><br><span class="line">    Vue.myGlobalMethod &#x3D; function () &#123;</span><br><span class="line">      console.log(&#39;Vue函数对象的myGlobalMethod()&#39;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2. 添加全局资源</span><br><span class="line">    Vue.directive(&#39;my-directive&#39;,function (el, binding) &#123;</span><br><span class="line">      el.textContent &#x3D; &#39;my-directive----&#39;+binding.value</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3. 添加实例方法</span><br><span class="line">    Vue.prototype.$myMethod &#x3D; function () &#123;</span><br><span class="line">      console.log(&#39;vm $myMethod()&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#x2F;&#x2F; 4. 向外暴露</span><br><span class="line">  window.MyPlugin &#x3D; MyPlugin</span><br><span class="line">&#125;)(window)</span><br><span class="line"></span><br><span class="line">调用：</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;vue-myPlugin.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 声明使用插件(安装插件: 调用插件的install())</span><br><span class="line">  Vue.use(MyPlugin) &#x2F;&#x2F; 内部会调用插件对象的install()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue对象"><a href="#Vue对象" class="headerlink" title="Vue对象"></a>Vue对象</h2><h3 id="el"><a href="#el" class="headerlink" title="el"></a>el</h3><ul><li>指定dom标签容器的选择器</li><li>Vue就会管理对应的标签及其子标签</li></ul><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><ul><li>对象或函数类型</li><li>指定初始化状态属性数据的对象</li><li>vm也会自动拥有data中所有属性</li><li>页面中可以直接访问使用</li><li>数据代理: 由vm对象来代理对data中所有属性的操作(读/写)</li></ul><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><ul><li>包含多个方法的对象</li><li>供页面中的事件指令来绑定回调</li><li>回调函数默认有event参数, 但也可以指定自己的参数</li><li>所有的方法由vue对象来调用,访问data中的属性直接使用this.xxx</li></ul><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li>包含多个方法的对象</li><li>对状态属性进行计算返回一个新的数据, 供页面获取显示</li><li>一般情况下是相当于是一个只读的属性</li><li>利用get/set方法来实现属性数据的计算读取, 同时监视属性数据的变化</li><li>如何给对象定义get/set属性<ul><li>在创建对象时指定: get name () {return xxx} / set name (value) {}</li><li>对象创建之后指定: Object.defineProperty(obj, age, {get(){}, set(value){}})</li></ul></li></ul><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul><li>包含多个属性监视的对象</li><li>分为一般监视和深度监视<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    &#39;xxx&#39; : &#123;</span><br><span class="line">        deep : true,</span><br><span class="line">        handler : fun(value)</span><br><span class="line">    &#125;</span><br><span class="line">另一种添加监视方式: vm.$watch(&#39;xxx&#39;, funn)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><p><img src="/2020/07/22/Vue/live.png" alt></p><ul><li>大致分为三个阶段：<ol><li>初始化显示<ul><li>beforeCreate()</li><li>created()</li><li>beforeMount()</li><li>mounted()<br>2) 更新状态:this.xxx=value</li><li>beforeUpdate()</li><li>updated()<br>3) 销毁vue实例:vm.$destory()</li><li>beforeDestory()</li><li>destoryed()</li></ul></li></ol></li></ul><ul><li>主要的生命周期函数(钩子)<ul><li>created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)</li><li>beforeDestroy(): 做一些收尾的工作,如：清除定时器</li></ul></li></ul><h2 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡&amp;动画"></a>过渡&amp;动画</h2><ul><li>利用vue去操控css的transition/animation动画</li><li>模板: 使用<transition name="xxx">包含带动画的标签<ul><li>css样式<ul><li>.fade-enter-active: 进入过程, 指定进入的transition</li><li>.fade-leave-active: 离开过程, 指定离开的transition</li><li>.xxx-enter, .xxx-leave-to: 指定隐藏的样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">编码例子</span><br><span class="line">       &#x2F;&#x2F;显示隐藏时的过渡效果</span><br><span class="line">    .xxx-enter-active, .xxx-leave-active &#123;</span><br><span class="line">      transition: opacity .5s</span><br><span class="line">    &#125;</span><br><span class="line">       &#x2F;&#x2F;隐藏时的样式</span><br><span class="line">    .xxx-enter, .xxx-leave-to &#123;</span><br><span class="line">      opacity: 0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;transition name&#x3D;&quot;xxx&quot;&gt;</span><br><span class="line">      &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></transition></li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>功能:对要显示的数据进行特定格式化后再显示</li><li>注意:并没有改变原本的数据,可是产生新的对应的数据</li></ul><ol><li>定义过滤器 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(filterName,function(value[,arg1,arg2,...])&#123;</span><br><span class="line">&#x2F;&#x2F;进行一定的数据处理</span><br><span class="line">return newValue</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>使用过滤器 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;myData|filterName&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;myData|filterName(arg)&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure> vue init webpack-simple vue_demo –offline</li></ol><h1 id="vue组件化编码"><a href="#vue组件化编码" class="headerlink" title="vue组件化编码"></a>vue组件化编码</h1><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init webpack vue_demo</span><br><span class="line">cd vue_demo</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line">访问:http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br></pre></td></tr></table></figure><h2 id="模板项目的结构"><a href="#模板项目的结构" class="headerlink" title="模板项目的结构"></a>模板项目的结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|--build: webpack相关的配置文件夹(基本不需要修改)</span><br><span class="line">    |--dev-server.js:通过express启动后台服务器</span><br><span class="line">|--config:webpack相关的配置文件夹(基本不需要修改)</span><br><span class="line">    |--index.js:指定的后台服务的端口号和静态资源文件夹</span><br><span class="line">|--node_modules</span><br><span class="line">|--src:源码文件夹</span><br><span class="line">    |--components:vue组件及其相关资源文件夹</span><br><span class="line">    |--App.vue:应用根主组件</span><br><span class="line">    |--main.js:应用入口js</span><br><span class="line">|--static:静态资源文件夹</span><br><span class="line">|--.babelrc:babel的配置文件</span><br><span class="line">|--.eslintignore:eslint检查忽略的配置</span><br><span class="line">|--.eslintrc.js:eslint检查的配置</span><br><span class="line">|--.gitignore:git版本管制忽略的配置</span><br><span class="line">|--index.html:主页面文件</span><br><span class="line">|--package.json:应用包配置文件</span><br><span class="line">|--README.md:应用描述说明的readme文件</span><br></pre></td></tr></table></figure><h2 id="项目的打包"><a href="#项目的打包" class="headerlink" title="项目的打包"></a>项目的打包</h2><ul><li>npm run build</li><li>发布：<ol><li>使用静态服务器工具包<ul><li>npm install -g serve</li><li>serve dist </li><li>访问：localhost:5000</li></ul></li><li>使用动态web服务器（tomcat）<ul><li>配置webpack.prod.conf.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">  publicPath:&#39;打包文件夹名称&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新打包npm run build</li><li>修改dist文件夹名称</li><li>将dist文件夹复制到tomcat的webpack下</li><li>启动tomcat–&gt;startup</li><li>访问：localhost：8080</li></ul></li></ol></li></ul><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>1)    ESLint 是一个代码规范检查工具<br>2)    它定义了很多特定的规则, 一旦你的代码违背了某一规则, eslint 会作出非常有用的提示<br>3)    官网: <a href="http://eslint.org/" target="_blank" rel="noopener">http://eslint.org/</a><br>4)    基本已替代以前的 JSLint</p><h3 id="ESLint-提供以下支持"><a href="#ESLint-提供以下支持" class="headerlink" title="ESLint 提供以下支持"></a>ESLint 提供以下支持</h3><p>1)    ES<br>2)    JSX<br>3)    style 检查<br>4)    自定义错误和提示</p><h3 id="ESLint-提供以下几种校验"><a href="#ESLint-提供以下几种校验" class="headerlink" title="ESLint 提供以下几种校验"></a>ESLint 提供以下几种校验</h3><p>1)    语法错误校验<br>2)    不重要或丢失的标点符号，如分号<br>3)    没法运行到的代码块（使用过 WebStorm 的童鞋应该了解）<br>4)    未被使用的参数提醒<br>5)    确保样式的统一规则，如 sass 或者 less<br>6)    检查变量的命名</p><h2 id="组件的定义和使用"><a href="#组件的定义和使用" class="headerlink" title="组件的定义和使用"></a>组件的定义和使用</h2><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">页面模板</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">JS 模块对象</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">    &#125;, </span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  computed: &#123;&#125;, </span><br><span class="line">  components: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;HelloWorld&gt;&lt;&#x2F;HelloWorld&gt; &#x2F;&#x2F;使用组件标签</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld&#39; &#x2F;&#x2F;引入组件</span><br><span class="line">export default &#123;</span><br><span class="line">components: &#123; </span><br><span class="line">  HelloWorld          &#x2F;&#x2F;映射成标签</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a><strong>组件间通信</strong></h2><p>1)    不要在子组件中直接修改父组件的状态数据<br>2)    数据在哪, 更新数据的行为(函数)就应该定义在哪</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><ol><li>父组件使用组件标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component name&#x3D;&#39;tom&#39; :age&#x3D;&#39;3&#39; :set-name&#x3D;&#39;setName&#39;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">需要动态的数据的时候，可以用属性绑定的形式设置，此时数据来自父组件data中的数据，传的值可以是数字、对象、数组等等</span><br></pre></td></tr></table></figure></li><li>子组件定义component<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在组件内声明所有的 props</span><br><span class="line"></span><br><span class="line">方式一: 只指定名称</span><br><span class="line">props: [&#39;name&#39;, &#39;age&#39;, &#39;setName&#39;]</span><br><span class="line"></span><br><span class="line">方式二: 指定名称和类型</span><br><span class="line">props: &#123;</span><br><span class="line">name: String, age: Number,</span><br><span class="line">setNmae: Function</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方式三: 指定名称&#x2F;类型&#x2F;必要性&#x2F;默认值</span><br><span class="line">props: &#123;</span><br><span class="line">name: &#123;type: String, required: true, default:xxx&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>1)    此方式用于<strong>父组件向子组件传递数据</strong></li></ol><p>2)    所有标签属性都会成为组件对象的属性, 模板页面可以直接引用</p><p>3)    问题:</p><ul><li>如果需要向非子后代传递数据必须多层逐层传递</li><li>兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</li></ul><h3 id="vue自定义事件"><a href="#vue自定义事件" class="headerlink" title="vue自定义事件"></a>vue自定义事件</h3><ol><li>绑定事件监听<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方式一: 通过 v-on 绑定</span><br><span class="line">@delete_todo&#x3D;&quot;deleteTodo&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方 式 二 : 通 过 $on() </span><br><span class="line">this.$refs.xxx.$on(&#39;delete_todo&#39;, function (todo) &#123;</span><br><span class="line">this.deleteTodo(todo)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>触发事件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 触发事件(只能在父组件中接收) </span><br><span class="line">this.$emit(eventName, data)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>此方式只用于<strong>子组件向父组件发送消息(数据)</strong></p></li><li><p>问题: 隔代组件或兄弟组件间通信此种方式不合适</p></li></ul><h3 id="消息订阅与发布-PubSubJS-库"><a href="#消息订阅与发布-PubSubJS-库" class="headerlink" title="消息订阅与发布(PubSubJS 库)"></a>消息订阅与发布(PubSubJS 库)</h3><ol><li>订阅消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">绑定事件监听 (订阅消息)</span><br><span class="line">目标:  标签元素&lt;button&gt; </span><br><span class="line">事件名(类型): click&#x2F;focus </span><br><span class="line">回调函数: function(event)&#123;&#125;</span><br><span class="line"></span><br><span class="line">PubSub.subscribe(&#39;msg&#39;, function(msg, data)&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li>发布消息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">触发事件 (发布消息)</span><br><span class="line">DOM 事件: 用户在浏览器上对应的界面上做对应的操作</span><br><span class="line">自定义: 编码手动触发</span><br><span class="line"></span><br><span class="line">PubSub.publish(&#39;msg&#39;, data)</span><br></pre></td></tr></table></figure></li></ol><ul><li>优点: 此方式可实现<strong>任意关系组件间通信(数据)</strong></li></ul><h3 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot(插槽)"></a>slot(插槽)</h3><ul><li>此方式用于父组件向子组件传递<code>标签数据</code></li></ul><ol><li>子组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;slot name&#x3D;&quot;xxx&quot;&gt;不确定的标签结构 1&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;div&gt;组件确定的标签结构&lt;&#x2F;div&gt;</span><br><span class="line">&lt;slot name&#x3D;&quot;yyy&quot;&gt;不确定的标签结构 2&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li><li>父组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;child&gt;</span><br><span class="line">&lt;div slot&#x3D;&quot;xxx&quot;&gt;xxx 对应的标签结构&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div slot&#x3D;&quot;yyy&quot;&gt;yyyy 对应的标签结构&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;child&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue-ajax"><a href="#Vue-ajax" class="headerlink" title="Vue-ajax"></a>Vue-ajax</h1><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2></li></ol><ul><li>vue 插件, 非官方库, vue1.x 使用广泛</li><li><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md" target="_blank" rel="noopener">在线文档</a></li></ul><ol><li>下载<ul><li>npm install vue-resource –save</li></ul></li><li>使用 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入模块</span><br><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line">&#x2F;&#x2F; 使用插件</span><br><span class="line">Vue.use(VueResource)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过 vue&#x2F;组件对象发送 ajax 请求</span><br><span class="line">this.$http.get(&#39;&#x2F;someUrl&#39;).then((response) &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; success callback console.log(response.data) &#x2F;&#x2F;返回结果数据</span><br><span class="line">&#125;, (response) &#x3D;&gt; &#123;</span><br><span class="line">console.log(response.statusText) &#x2F;&#x2F;错误信息</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul><li>通用的 ajax 请求库, 官方推荐, vue2.x 使用广泛</li><li><a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md" target="_blank" rel="noopener">在线文档</a></li></ul><ol><li><p>下载</p><ul><li>npm install axios –save</li></ul></li><li><p>使用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入模块</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送 ajax 请求</span><br><span class="line">axios.get(url)</span><br><span class="line">.then(response &#x3D;&gt; &#123;</span><br><span class="line">console.log(response.data) &#x2F;&#x2F; 得到返回结果数据</span><br><span class="line">&#125;)</span><br><span class="line">.catch(error &#x3D;&gt; &#123; console.log(error.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h1><ul><li>路由的本质就是一种对应关系，比如说url地址和资源之间的对应关系</li></ul><ol><li><p>SPA</p><ul><li>单页面应用程序（single page application）：整个网站只有一个页面，内容的变化通过Ajax局部更新实现，同时支持浏览器地址栏前进后退操作</li><li>SPA实现原理之一：基于URl地址的hash（hash的变化会导致浏览器记录访问历史的变化，但是hash的变化不会触发新的url请求）</li><li>在SPA的实现过程中，最核心的技术点就是前端路由</li></ul></li><li><p>前端路由</p><ul><li>概念：根据不同的用户事件，显示不同的页面内容</li><li>本质：用户事件与事件处理函数之间的对应关系<br><img src="/2020/07/22/Vue/qian.png" alt></li></ul></li></ol><h2 id="router基本使用步骤"><a href="#router基本使用步骤" class="headerlink" title="router基本使用步骤"></a>router基本使用步骤</h2><ol><li><p>先创建路由器模块（定义路由组件）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 路由器模块</span><br><span class="line">import Vue from &#39;vue&#39; </span><br><span class="line">import VueRouter from &#39;vue-router&#39; </span><br><span class="line">import About from &#39;.&#x2F;components&#x2F;About.vue&#39;</span><br><span class="line">import Home from &#39;.&#x2F;components&#x2F;Home.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;挂载属性</span><br><span class="line">Vue.use(VueResource)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建路由对象并配置路由规则</span><br><span class="line">export default new VueRouter(&#123; routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;about&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;about&#39;, component: About</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;home&#39;, component: Home</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在main.js引入路由模块</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39; </span><br><span class="line">import router from&#39;.&#x2F;router&#39;  &#x2F;&#x2F;引入路由器模块</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建 vue 配置路由器</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;, </span><br><span class="line">router:router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用路由</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;!--路由链接--&gt;</span><br><span class="line">&lt;router-link    to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;!--用于渲染当前路由组件--&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由重定向redirect"><a href="#路由重定向redirect" class="headerlink" title="路由重定向redirect"></a>路由重定向redirect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;routes是路由规则数组</span><br><span class="line">routes: [</span><br><span class="line">    &#x2F;&#x2F;path设置为&#x2F;表示页面最初始的地址 &#x2F; ,redirect表示要被重定向的新地址，设置为一个路由即可</span><br><span class="line">    &#123; path:&quot;&#x2F;&quot;,redirect:&quot;&#x2F;user&quot;&#125;,</span><br><span class="line">    &#123; path: &quot;&#x2F;user&quot;, component: User &#125;,</span><br><span class="line">    &#123; path: &quot;&#x2F;login&quot;, component: Login &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">实现步骤:</span><br><span class="line">A.更改现有的路由模板：(在模板中添加子级路由链接以及占位符)</span><br><span class="line">var Login &#x3D; &#123; template: &#96;&lt;div&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;account&quot;&gt;账号密码登录&lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;phone&quot;&gt;扫码登录&lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;!-- 子路由组件将会在router-view中显示 --&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96; &#125;</span><br><span class="line"></span><br><span class="line">B.使用children添加子级路由规则：</span><br><span class="line">var myRouter &#x3D; new VueRouter(&#123;</span><br><span class="line">        routes: [</span><br><span class="line">            &#123;   path: &quot;&#x2F;login&quot;, component: Login,</span><br><span class="line">                &#x2F;&#x2F;通过children属性为&#x2F;login添加子路由规则</span><br><span class="line">                children:[</span><br><span class="line">                    &#123; path: &quot;&#x2F;login&#x2F;account&quot;, component: account &#125;,</span><br><span class="line">                    &#123; path: &quot;&#x2F;login&#x2F;phone&quot;, component: phone &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="向路由组件传参数"><a href="#向路由组件传参数" class="headerlink" title="向路由组件传参数"></a>向路由组件传参数</h2><ol><li><p>方式一：路由路径携带参数(param/query)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$route.params</span><br><span class="line"></span><br><span class="line">配置路由组件</span><br><span class="line">children: [</span><br><span class="line">&#123;path: &#39;mdetail&#x2F;:id&#39;, component: MessageDetail&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">配置路由链接</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#39;&#x2F;home&#x2F;message&#x2F;mdetail&#x2F;$&#123;message.id&#125;&#39;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式二：通过props获取参数</p></li></ol><ul><li><p>动态参数</p></li><li><p>A.我们可以将props属性设置为true来传递参数，route.params将会被设置为组件属性，那么组件可以通过props接收route.params</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">      &#123;path: &#39;mdetail&#x2F;:id&#39;, component: MessageDetail,props:true &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">props:[&#39;id&#39;]</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#39;&#x2F;home&#x2F;message&#x2F;mdetail&#x2F;message.id&#39;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>静态参数</p></li><li><p>B.可以将props属性设置为一个对象，那么组件可以通过props接收对象的数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">      &#123;path: &#39;mdetail&#x2F;:id&#39;, component: MessageDetail, props:&#123;name : &#39;xxx&#39; ,age:12&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">props:[&#39;name&#39;,&#39;age&#39;],</span><br><span class="line">&lt;div&gt;&#123;&#123;name+age&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>动静结合</p></li><li><p>C. 还可以将props属性设置为一个函数，那么就可以同时将参数数据以及对象数据传递给组件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">      &#123;path: &#39;mdetail&#x2F;:id&#39;, component: MessageDetail, props:&#123;name : &#39;xxx&#39; ,age:12, id &#x3D; router.params.id&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">props:[&#39;name&#39;,&#39;age&#39;,&#39;id&#39;],</span><br><span class="line">&lt;div&gt;&#123;&#123;name+age+id&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>方式三：&lt; router-view &gt;属性携带数据 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router-view :msg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="缓存路由组件对象"><a href="#缓存路由组件对象" class="headerlink" title="缓存路由组件对象"></a>缓存路由组件对象</h2><p>1)    默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的<br>2)    如果可以缓存路由组件对象, 可以提高用户体验<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure></p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ul><li>可以使用name属性给路由设置别名</li></ul><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol><li>声明式导航：通过点击链接的方式实现的导航&lt; router-link &gt;</li><li>编程式导航：调用js的api方法实现导航 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)</span><br><span class="line"></span><br><span class="line">this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)</span><br><span class="line"></span><br><span class="line">this.$router.back(): 请求(返回)上一个记录路由</span><br><span class="line"></span><br><span class="line">this.$router.go(-1): 请求(返回)上一个记录路由</span><br><span class="line"></span><br><span class="line">this.$router.go(1): 请求下一个记录路由</span><br></pre></td></tr></table></figure></li></ol><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><ul><li><p><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">vuex官方文档</a></p></li><li><p>vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享<br><img src="/2020/07/22/Vue/store.png" alt></p></li><li><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</p></li><li><p>这个状态自管理应用包含以下几个部分：</p><ul><li>state，驱动应用的数据源</li><li>view，以声明方式将 state 映射到视图</li><li>actions，响应在 view 上的用户输入导致的状态变化(包含 n 个更新状态的方法)<br><img src="/2020/07/22/Vue/3.png" alt></li></ul></li><li><p>核心思想(工作流程)：<br>  <img src="/2020/07/22/Vue/x.png" alt></p></li><li><p>使用vuex的好处：</p><ol><li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li><li>能够高效的实现组件之间的数据共享，提高开发效率</li><li>存储在vuex中的数据是响应式的，能够实时保持数据和页面的同步</li></ol></li><li><p>什么样的数据适合存储在vuex中</p><ul><li>一般情况下，只有组件之间共享的数据，才有必要存储在vuex中；对于组件中的私有数据，依旧存储在组件自身中的data中即可</li></ul></li></ul><h2 id="vuex的基本使用"><a href="#vuex的基本使用" class="headerlink" title="vuex的基本使用"></a>vuex的基本使用</h2><ol><li><p>安装vuex依赖包</p><ul><li>npm install vuex –save</li></ul></li><li><p>导入vuex包(在store组件中)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">    state:&#123; count:0 &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>将store对象挂载到vue实例中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39; </span><br><span class="line">import router from&#39;.&#x2F;router&#39;  &#x2F;&#x2F;引入路由器模块</span><br><span class="line">import store from&#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建 vue 配置路由器</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;, </span><br><span class="line">router:router,</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vuex的核心概念"><a href="#vuex的核心概念" class="headerlink" title="vuex的核心概念"></a>vuex的核心概念</h2><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3></li></ol><ul><li><p>State提供唯一的公共数据源，所有的共享数据都要统一放到Store的State中进行存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">        state:&#123; </span><br><span class="line">            &#x2F;&#x2F;共享数据</span><br><span class="line">            count:0</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>如何访问state中数据：</p><ol><li>方式一：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.state.全局变量名称</span><br></pre></td></tr></table></figure></li><li>方式二：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从vuex中按需导入mapState函数</span><br><span class="line">import &#123;mapState&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过mapState函数将全局数据映射为当前组件的计算属性</span><br><span class="line">computed：&#123;</span><br><span class="line">    ...mapState([&#39;count&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3></li></ol></li><li><p>Mutation用于变更store中的数据</p></li><li><p>只能通过mutation变更store的数据，不可以直接操作store中的数据</p></li><li><p>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">        state:&#123; </span><br><span class="line">            &#x2F;&#x2F;共享数据</span><br><span class="line">            count:0</span><br><span class="line">         &#125;，</span><br><span class="line">         </span><br><span class="line">         &#x2F;&#x2F; 定义mutation</span><br><span class="line">         mutations:&#123;</span><br><span class="line">             add(state)&#123;</span><br><span class="line">                 &#x2F;&#x2F;变更状态</span><br><span class="line">                 state.count++</span><br><span class="line">             &#125;，</span><br><span class="line"></span><br><span class="line">             &#x2F;&#x2F; 可以在触发mutations时传递参数</span><br><span class="line">             addn(state,step)&#123;</span><br><span class="line">                 &#x2F;&#x2F;变更状态</span><br><span class="line">                 state.count+&#x3D;step</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发mutation的方式:</p><ol><li>方式一<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    handel()&#123;</span><br><span class="line">        this.$store.commit(&#39;add&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handel2()&#123;</span><br><span class="line">        this.$store.commit(&#39;addn&#39;,3)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方式二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从vuex中按需导入mapState函数</span><br><span class="line">import &#123;mapMutations&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过mapMutations函数将需要的mutation函数映射为当前组件的methods方法</span><br><span class="line">methods：&#123;</span><br><span class="line">    ...mapMutations([&#39;add&#39;,&#39;addn&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li><p>action用于处理异步任务</p></li><li><p>如果通过异步操作变更数据，必须通过action而不是mutation，但是在action中还是要通过触发mutation的方式简介变更数据</p></li><li><p>actions异步任务（可以携带参数）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义action</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state:&#123; </span><br><span class="line">        &#x2F;&#x2F;共享数据</span><br><span class="line">        count:0</span><br><span class="line">     &#125;，</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F; 定义mutation</span><br><span class="line">     mutations:&#123;</span><br><span class="line">         add(state)&#123;</span><br><span class="line">             &#x2F;&#x2F;变更状态</span><br><span class="line">             state.count++</span><br><span class="line">         &#125;,</span><br><span class="line">         addn(state,step)&#123;</span><br><span class="line">             &#x2F;&#x2F;变更状态</span><br><span class="line">             state.count+&#x3D;step</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     actions:&#123;</span><br><span class="line">         addnAsync(context,step)&#123;</span><br><span class="line">             setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">                 context.commit(&#39;addn&#39;,5)</span><br><span class="line">             &#125;,1000)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>触发action的方式:</p><ol><li>方式一<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    handle3&#123;</span><br><span class="line">        this.$store.dispatch(&#39;addnAsync&#39;,step)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方式二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从vuex中按需导入mapActions函数</span><br><span class="line">import &#123;mapActions&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过mapActions函数将需要的mapActions函数映射为当前组件的methods方法</span><br><span class="line">methods：&#123;</span><br><span class="line">    ...mapActions([&#39;addnAsync&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><ul><li>Getter用于对store中的数据进行加工处理形成新数据</li><li>Getter不会修改state中的数据，他只起到包装的作用</li><li>Getter可以对store中已有的数据进行加工处理之后形成新的数据，类似于vue的计算属性</li><li>store中数据发生变化，Getter的数据也会跟着变化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义Getter</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">        state:&#123; </span><br><span class="line">            count:0 </span><br><span class="line">        &#125;，</span><br><span class="line">        getters:&#123;</span><br><span class="line">            shownum:state&#x3D;&gt;&#123;</span><br><span class="line">                return state.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li>使用getters<ol><li>方式一<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.getters.名称</span><br></pre></td></tr></table></figure></li><li>方式二<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapGetters&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapGetters([&#39;shownum&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="vue源码分析"><a href="#vue源码分析" class="headerlink" title="vue源码分析"></a>vue源码分析</h1><ul><li>源码：GitHub上一个仿vue实现的mvvm库：<a href="https://github.com/DMQ/mvvm" target="_blank" rel="noopener">https://github.com/DMQ/mvvm</a><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2>1)    数据代理: 通过一个对象代理对另一个对象(在前一个对象内部)中属性的操作(读/写)</li></ul><p>2)    vue 数据代理: 通过 vm 对象来代理 data 对象中所有属性的操作</p><p>3)    好处: 更方便的操作 data 中的数据</p><p>4)    基本实现流程<br>    1. 通过 Object.defineProperty()给 vm 添加与 data 对象的属性对应的属性描述符<br>    2. 所有添加的属性都包含 getter/setter<br>    3. getter/setter 内部去操作 data 中对应的属性数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">相关于Vue的构造函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将选项对象保存到vm</span></span><br><span class="line">  <span class="keyword">this</span>.$options = options;</span><br><span class="line">  <span class="comment">// 将data对象保存到vm和datq变量中</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">  <span class="comment">//将vm保存在me变量中</span></span><br><span class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 遍历data中所有属性</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123; <span class="comment">//key是data的某个属性名 举例属性名: name</span></span><br><span class="line">    <span class="comment">// 对指定属性实现代理</span></span><br><span class="line">    me._proxy(key);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对data进行监视</span></span><br><span class="line">  observe(data, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个用来编译模板的compile对象</span></span><br><span class="line">  <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">  $watch: <span class="function"><span class="keyword">function</span> (<span class="params">key, cb, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>, key, cb);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对指定属性实现代理</span></span><br><span class="line">  _proxy: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存vm</span></span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 给vm添加指定属性名的属性(使用属性描述)</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">      configurable: <span class="literal">false</span>, <span class="comment">// 不能再重新定义</span></span><br><span class="line">      enumerable: <span class="literal">true</span>, <span class="comment">// 可以枚举</span></span><br><span class="line">      <span class="comment">// 当通过vm.name读取属性值时自动调用</span></span><br><span class="line">      <span class="keyword">get</span>: function proxyGetter() &#123;</span><br><span class="line">        <span class="comment">// 读取data中对应属性值返回(实现代理读操作)</span></span><br><span class="line">        <span class="keyword">return</span> me._data[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 当通过vm.name = 'xxx'时自动调用</span></span><br><span class="line">      <span class="keyword">set</span>: function proxySetter(newVal) &#123;</span><br><span class="line">        <span class="comment">// 将最新的值保存到data中对应的属性上(实现代理写操作)</span></span><br><span class="line">        me._data[key] = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h2><h3 id="模板解析的基本流程"><a href="#模板解析的基本流程" class="headerlink" title="模板解析的基本流程"></a>模板解析的基本流程</h3><p>1)    将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中<br>2)    对 fragment 中的所有层次子节点递归进行编译解析处理<br>    *    对大括号表达式文本节点进行解析<br>    *    对元素节点的指令属性进行解析<br>    *    事件指令解析<br>    *    一般指令解析</p><p>3)    将解析后的 fragment 添加到 el 中显示</p><h3 id="大括号表达式解析"><a href="#大括号表达式解析" class="headerlink" title="大括号表达式解析"></a>大括号表达式解析</h3><p>1)    根据正则对象得到匹配出的表达式字符串:  子匹配/RegExp.$1    name<br>2)    从 data 中取出表达式对应的属性值<br>3)    将属性值设置为文本节点的 textContent</p><h3 id="事件指令解析"><a href="#事件指令解析" class="headerlink" title="事件指令解析"></a>事件指令解析</h3><p>1)    从指令名中取出事件名<br>2)    根据指令的值(表达式)从 methods 中得到对应的事件处理函数对象<br>3)    给当前元素节点绑定指定事件名和回调函数的 dom 事件监听<br>4)    指令解析完后, 移除此指令属性</p><h3 id="一般指令解析"><a href="#一般指令解析" class="headerlink" title="一般指令解析"></a>一般指令解析</h3><p>1)    得到指令名和指令值(表达式)    text/html/class    msg/myClass<br>2)    从 data 中根据表达式得到对应的值<br>3)    根据指令名确定需要操作元素节点的什么属性<br>    *    v-text—textContent 属性<br>    *    v-html—innerHTML 属性<br>    *    v-class–className 属性<br>4)    将得到的表达式的值设置到对应的属性上<br>5)    移除元素的指令属性</p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul><li>一旦更新了 data 中的某个属性数据, 所有界面上直接使用或间接使用了此属性的节点都会更新</li></ul><h3 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h3><p>1)    数据劫持是 vue 中用来实现数据绑定的一种技术<br>2)    基本思想: 通过 defineProperty()来监视 data 中所有属性(任意层次)数据的变化, 一旦变化就去更新界面</p><h3 id="四个重要对象"><a href="#四个重要对象" class="headerlink" title="四个重要对象"></a>四个重要对象</h3><p>1)    Observer<br>    -    用来对 data 所有属性数据进行劫持的构造函数<br>    -    给 data 中所有属性重新定义属性描述(get/set)<br>    -    为 data 中的每个属性创建对应的 dep 对象</p><p>2)    Dep(Depend)<br>    -    data 中的每个属性(所有层次)都对应一个 dep 对象<br>    -    创建的时机:<br>        *    在初始化 define data 中各个属性时创建对应的 dep 对象<br>        *    在 data 中的某个属性值被设置为新的对象时<br>    -    对象的结构<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">id, &#x2F;&#x2F; 每个 dep 都有一个唯一的 id</span><br><span class="line">subs &#x2F;&#x2F;包含 n 个对应 watcher 的数组(subscribes 的简写)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    -    subs 属性说明<br>        *    当 watcher 被创建时, 内部将当前 watcher 对象添加到对应的 dep 对象的 subs 中<br>        *    当此 data 属性的值发生改变时, subs 中所有的 watcher 都会收到更新的通知,从而最终更新对应的界面</p><p>3)    Compiler<br>    -    用来解析模板页面的对象的构造函数(一个实例)<br>    -    利用 compile 对象解析模板页面<br>    -    每解析一个表达式(非事件指令)都会创建一个对应的 watcher 对象, 并建立 watcher与 dep 的关系<br>    -    complie 与 watcher 关系: 一对多的关系</p><p>4)    Watcher</p><ul><li>模板中每个非事件指令或表达式都对应一个 watcher 对象</li><li>监视当前表达式数据的变化</li><li>创建的时机: 在初始化编译模板时</li><li>对象的组成<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">vm,&#x2F;&#x2F;vm 对象</span><br><span class="line">exp, &#x2F;&#x2F;对应指令的表达式</span><br><span class="line">cb, &#x2F;&#x2F;当表达式所对应的数据发生改变的回调函数value, &#x2F;&#x2F;表达式当前的值</span><br><span class="line">depIds &#x2F;&#x2F;表达式中各级属性所对应的 dep 对象的集合对象</span><br><span class="line">&#x2F;&#x2F;属性名为 dep 的 id, 属性值为 dep</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5)    总结: dep 与 watcher 的关系: 多对多<br>    -    data 中的一个属性对应一个 dep, 一个 dep 中可能包含多个 watcher(模板中有几个表达式使用到了同一个属性)<br>    -    模板中一个非事件表达式对应一个 watcher, 一个 watcher 中可能包含多个 dep(表达式是多层: a.b)<br>    -    数据绑定使用到 2 个核心技术<br>        *    defineProperty()<br>        *    消息订阅与发布</p><p><img src="/2020/07/22/Vue/mv.png" alt></p><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>1)    双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的<br>2)    双向数据绑定的实现流程:<br>    - 在解析 v-model 指令时, 给当前元素添加 input 监听<br>    - 当 input 的 value 发生改变时, 将最新的值赋值给当前表达式所对应的 data 属性</p><p><strong><em>最后这点源码的解析属实给我看的有点晕，讲的时候能明白，自己再看就又想不通了/(ㄒoㄒ)/~~，还是理解的不够深入</em></strong></p><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><ul><li>vue.set<ul><li>向对象添加一个新的属性</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;中国最火的一套构建用户界面的渐进式框架&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="高级框架" scheme="http://xyx6.top/categories/%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://xyx6.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://xyx6.top/2020/07/21/Bootstrap/"/>
    <id>http://xyx6.top/2020/07/21/Bootstrap/</id>
    <published>2020-07-21T12:45:58.000Z</published>
    <updated>2021-07-09T08:32:56.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>简洁、直观、强悍的前端开发框架，让web开发更迅速、简单</p></blockquote><a id="more"></a><ul><li>中文网 ： <a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a></li><li>英文网 :  <a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2></li></ul><ol><li><p>流体布局容器</p><ul><li>容器的width为auto，只是两边加了15px的padding</li><li>源码 ：<ul><li>流体容器&amp;固定容器 公共样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">margin-right: auto;</span><br><span class="line">margin-left: auto;</span><br><span class="line">padding-left:  15px;</span><br><span class="line">padding-right: 15px;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>固定布局</p><ul><li>容器的width会随设备分辨率的不同而生产变化<ul><li>分辨率阈值<ul><li>w &gt;=1200(lg 大屏pc)             容器的width为1170 （1140+槽宽）</li><li>1200&gt; w &gt;=992(md 中屏pc)        容器的width为970 （940+槽宽）</li><li>992 &gt; w &gt;=768(sm 平板)        容器的width为750 （720+槽宽）</li><li>768 &gt; w  (xs 移动手机)          容器的width为auto </li></ul></li></ul></li><li>源码：<ul><li>固定容器 特定样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">顺序不可变</span><br><span class="line">@media (min-width: @screen-sm-min) &#123;</span><br><span class="line">width: @container-sm;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: @screen-md-min) &#123;</span><br><span class="line">width: @container-md;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: @screen-lg-min) &#123;</span><br><span class="line">width: @container-lg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><ol><li><p>栅格系统<br> <img src="/2020/07/21/Bootstrap/%E6%A0%85%E6%A0%BC.png" alt></p><ul><li>按照不同屏幕划分为12等分</li><li>行（row）可以清除父容器的边距15px</li><li>列数大于12，会另起一行排列</li><li>可以同时为一列指定多个设备的类名，以便适应不同屏幕下划分不同的份数，例如：class=”col-xs-6 col-md-4”</li></ul></li><li><p>列嵌套</p><ul><li>简单的理解就是一行内分成若干个小块后，每一个小块还能再等分成12小块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;col-xs-8 col-sm-6&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;我们在列嵌套时最好加一个行row 这样可以取消父元素的padding值 而且高度自动和父级一样高</span><br><span class="line"> &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">   &lt;div class&#x3D;&quot;col-sm-6&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt;div class&#x3D;&quot;col-sm-6&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列偏移</p><ul><li>使用 .col-md-offset-类可以将列向右侧(按份数)偏移。这些类实际是通过使用选*择器为当前元素增加了左侧的边距（margin）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;col-md-4&quot;&gt;.col-md-4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;col-md-4 col-md-offset-4&quot;&gt;.col-md-4 .col-md-offset-4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列排序</p><ul><li>通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。</li><li>push是将块向右推</li><li>pull是将块向左拉</li></ul></li></ol><h2 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h2><ul><li>通过单独或联合使用以下列出的类，可以针对不同屏幕尺寸隐藏或显示页面内容。<br><img src="/2020/07/21/Bootstrap/xiang.png" alt></li></ul><p><strong><em>现在暂时先了解这么多，bootstrap的精髓主要体现在栅格系统上，日后如果再用到其他东西再去<a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">bootstrap官方文档</a>查阅即可</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;简洁、直观、强悍的前端开发框架，让web开发更迅速、简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端三大块" scheme="http://xyx6.top/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E5%9D%97/"/>
    
    
      <category term="Bootstrap" scheme="http://xyx6.top/tags/Bootstrap/"/>
    
      <category term="css" scheme="http://xyx6.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>less</title>
    <link href="http://xyx6.top/2020/07/21/less/"/>
    <id>http://xyx6.top/2020/07/21/less/</id>
    <published>2020-07-21T07:09:51.000Z</published>
    <updated>2021-07-09T08:32:30.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>less是一门css的预处理语言</p></blockquote><a id="more"></a><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><ul><li>less是一门css的预处理语言<ul><li>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式</li><li>在less中添加了许多的新特性：像对变量的支持、对mixin的支持… …</li><li>less的语法大体上和css语法一致，但是less中增添了许多对css的扩展，<br>  所以浏览器无法直接执行less代码，要执行必须向将less转换为css，然后再由浏览器执行</li><li>在vscode中下载easy less插件，它可以将less准换成css，只需要.less和.css文件取相同的文件名即可</li></ul></li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量，在变量中可以存储一个任意的值</p><ul><li><p>并且我们可以在需要时，任意的修改变量中的值</p></li><li><p>变量的语法： @变量名</p></li><li><p>作为变量时，如果是直接使用则以 @变量名 的形式使用即可</p></li><li><p>作为类名，或者一部分值使用时必须以 @{变量名} 的形式使用</p></li><li><p>变量发生重名时，会优先使用比较近的变量</p></li><li><p>可以在变量声明前就使用变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@a:200px;</span><br><span class="line">@b:#bfa;</span><br><span class="line">@c:box6;</span><br><span class="line">.box5&#123;</span><br><span class="line">  </span><br><span class="line">width: @a;</span><br><span class="line">color:@b;</span><br><span class="line">&#125;</span><br><span class="line">.@&#123;c&#125;&#123;</span><br><span class="line">width: @a;</span><br><span class="line">background-image: url(&quot;@&#123;c&#125;&#x2F;1.png&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2></li></ul></li><li><p>子元素选择器&gt;</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">less:</span><br><span class="line">.box1&#123;</span><br><span class="line">.box2&#123;&#125;</span><br><span class="line">&gt;.box3&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line">.box1 .box2 &#123;&#125;</span><br><span class="line">.box1 &gt; .box3 &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>&amp; 表示外层(只向外一层)的父元素</p></li><li><p>:extend() 对当前选择器扩展指定选择器的样式（选择器分组）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">less:</span><br><span class="line">.p1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.p2:extend(.p1)&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line">.p1,</span><br><span class="line">.p2 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.p2 &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mixin 混合</p><ul><li>直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制</li><li>使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixins<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">less:</span><br><span class="line">.p3&#123;</span><br><span class="line">.p1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.p4()&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.p5&#123;</span><br><span class="line">    .p4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line">.p3 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.p5 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混合函数"><a href="#混合函数" class="headerlink" title="混合函数"></a>混合函数</h2></li></ul></li><li><p>在混合函数中可以直接设置变量</p></li><li><p>还可以调用混合函数，按顺序传递参数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">less:</span><br><span class="line">.test(@w:100px,@h:200px,@bg-color:red)&#123;</span><br><span class="line">width: @w;</span><br><span class="line">height: @h;</span><br><span class="line">border: 1px solid @bg-color;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">.test(300px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line">div &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 200px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>平均值average()可以设置颜色为参数，取两个颜色中间的颜色</p></li><li><p>加深颜色darken(颜色，百分比)</p></li></ul><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul><li><p>@import用来将其他的less引入到当前的less</p></li><li><p>在less中所有的数值都可以直接进行运算</p></li><li><p>easy  less配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;less.compile&quot;: &#123;</span><br><span class="line">        &quot;compress&quot;:  true,  &#x2F;&#x2F; 是否压缩</span><br><span class="line">        &quot;sourceMap&quot;: true,  &#x2F;&#x2F; 生成源码地图使less文件和css一一对应，调试的时候直接对应到less中的位置</span><br><span class="line">        &quot;out&quot;: true, &#x2F;&#x2F; 生成css文件</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;less是一门css的预处理语言&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端三大块" scheme="http://xyx6.top/categories/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E5%9D%97/"/>
    
    
      <category term="CSS" scheme="http://xyx6.top/tags/CSS/"/>
    
      <category term="less" scheme="http://xyx6.top/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>服务器竟然被挖矿程序攻击！？</title>
    <link href="http://xyx6.top/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/"/>
    <id>http://xyx6.top/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/</id>
    <published>2020-07-20T06:13:41.000Z</published>
    <updated>2021-07-09T08:35:05.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>今天一大早醒来，洗漱了吃完饭，准备接着进度学习呢，突然手机短信提示服务器安全紧急事件：挖矿程序，上云服务控制台一顿找才发现服务器的cpu竟然爆了，平时服务器就放个博客，cpu利用率也才10%都不到，于是开始着手解决这个问题</p></blockquote><a id="more"></a><h1 id="挖矿程序是什么？"><a href="#挖矿程序是什么？" class="headerlink" title="挖矿程序是什么？"></a>挖矿程序是什么？</h1><ul><li><p>挖矿是跟区块链以及虚拟币有关系，虚拟币是挖矿挖出来的，每间隔一段时间，比特币或者以太坊虚拟币就会在他们的区块链系统上生成一个块的随机代码，网络上的所有服务器都可以去找这个随机代码，也就是挖矿的过程对这个随机代码进行挖掘，谁挖到这个代码就会产生一个区块链的块，那么比特币跟以太坊就会奖励找到随机代码的人，奖励一定数量的虚拟币，那么挖矿的人就会有动力去挖矿，去维护整个区块链节点的网络正常运行，挖矿需要计算哈希值需要服务器的处理能力，所以有些攻击者利用入侵别人服务器来给自己挖矿，获取利润。</p></li><li><p>简单的来说就是别人利用你服务器的漏洞植入一段程序，然后用你的服务器帮他挖矿来帮他谋求利益</p></li></ul><h1 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h1><ol><li><strong>找到占用率高的进程并杀死</strong></li></ol><ul><li>首先我们用 top 指令来查看服务器的进程<br><img src="/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/1.png" alt></li><li>发现cpu占用率爆满</li><li>然后我们找到占有率最高的进程，找到他的pid</li><li>然后把该进程kill掉  kill -9 pid</li><li>然后cpu恢复了平静<br><img src="/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/2.png" alt></li></ul><ol start="2"><li><strong>查看是否有定时任务</strong></li></ol><ul><li>我等待了半个小时发现挖矿程序并没有卷土重来</li><li>但是为了以防万一我还是把备用方案做好</li><li>挖矿程序一般都有定时任务，查看定时任务得去crontab文件里找<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;crontab</span><br><span class="line">一般在下面会有可疑的任务，根据任务找到脚本，并且删掉他</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>删除残余文件</strong></li></ol><ul><li>cd /proc/进程号</li><li>删除路径下的所有文件</li></ul><p><strong><em>不得不说阿里云安全售卖的那些服务并不是没有道理的，原来我他给我提示的那些风险警告并不是没用的，我一直以为是他为了售卖自己的产品故意安排这么多漏洞的，这会见识到了</em></strong></p><h1 id="7-21"><a href="#7-21" class="headerlink" title="7.21"></a>7.21</h1><ul><li>我太天真了，他又来了，这回是在凌晨4点启动的<br><img src="/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/721.png" alt></li><li>我收到危险提示短信后，去服务器查看服务器进程<br><img src="/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/7211.png" alt></li><li>果然有人在用我的服务器挖矿</li><li>这次我没有直接杀死进程，而是先找到他的进程文件<br><img src="/2020/07/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%A2%AB%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F%E6%94%BB%E5%87%BB%EF%BC%81%EF%BC%9F/72111.png" alt></li><li>发现了他的启动程序在/home/git/xmr64下</li><li>然后杀死进程</li><li>删除rm -f启动程序</li><li>删除rm -rf进程残留文件</li></ul><p><strong><em>这下应该清净了吧，启动文件都没有了，应该不会再找上门了吧</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;今天一大早醒来，洗漱了吃完饭，准备接着进度学习呢，突然手机短信提示服务器安全紧急事件：挖矿程序，上云服务控制台一顿找才发现服务器的cpu竟然爆了，平时服务器就放个博客，cpu利用率也才10%都不到，于是开始着手解决这个问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后台服务器端" scheme="http://xyx6.top/categories/%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
    
      <category term="阿里云服务器" scheme="http://xyx6.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://xyx6.top/2020/07/18/Webpack/"/>
    <id>http://xyx6.top/2020/07/18/Webpack/</id>
    <published>2020-07-18T05:27:44.000Z</published>
    <updated>2021-07-09T08:31:58.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序<br><br>webpack是一种前端资源构建工具，一个静态模块打包器(modulebundler)<br><br>在webpack看来,前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理<br><br>它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)<br></p></blockquote><a id="more"></a><p><img src="/2020/07/18/Webpack/1.png" alt></p><h1 id="webpack五个核心概念"><a href="#webpack五个核心概念" class="headerlink" title="webpack五个核心概念"></a>webpack五个核心概念</h1><ol><li>Entry<ul><li>入口(Entry)指示webpack以哪个文件为入口起点开始打包，分析构建内部依赖图</li></ul></li><li>Output<ul><li>输出(Output)指示webpack打包后的资源bundles输出到哪里去，以及如何命名</li></ul></li><li>Loader<ul><li>Loader让webpack能够去处理那些非JavaScript文件(webpack自身只理解JavaScript)</li></ul></li><li>Plugins<ul><li>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</li></ul></li><li>Mode<ul><li>模式(Mode)指示webpack使用相应模式的配置<br><img src="/2020/07/18/Webpack/mode.png" alt></li></ul></li></ol><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><ol><li>初始化package.json<ul><li>输入指令:npminit</li></ul></li></ol><p>2.下载并安装webpack</p><ul><li>输入指令：<ul><li>npm install webpack webpack-cli -g //全局安装</li><li>npm install webpack webpack-cli -D </li></ul></li></ul><h2 id="编译打包应用"><a href="#编译打包应用" class="headerlink" title="编译打包应用"></a>编译打包应用</h2><ul><li>开发环境：webpack ./src/index.js -o ./build/built.js –mode=development<ul><li>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js 整体打包环境是开发环境</li><li>功能：webpack能够编译打包js和json文件，并且能将es6的模块化语法转换成浏览器能识别的语法</li></ul></li><li>生产环境：webpack ./src/index.js -o ./build/built.js –mode=production<ul><li>webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js，整体打包环境是生产环境</li><li>功能：在开发配置功能上多一个功能，压缩代码</li></ul></li></ul><h1 id="webpack开发环境配置"><a href="#webpack开发环境配置" class="headerlink" title="webpack开发环境配置"></a>webpack开发环境配置</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><ul><li>webpack.config.js  <ul><li>webpack的配置文件</li><li>作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</li><li>所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; resolve用来拼接绝对路径的方法</span><br><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; webpack配置</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 入口起点</span><br><span class="line">entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出</span><br><span class="line">output: &#123;</span><br><span class="line">    &#x2F;&#x2F; 输出文件名</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; 输出路径</span><br><span class="line">    &#x2F;&#x2F; __dirname nodejs的变量，代表当前文件的目录绝对路径</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; loader的配置</span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#x2F;&#x2F; 详细loader配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 举例</span><br><span class="line">    &#x2F;&#x2F; 不同文件必须配置不同loader处理</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 匹配.css后缀的文件</span><br><span class="line">    test: &#x2F;\.css$&#x2F;,</span><br><span class="line">    &#x2F;&#x2F; 使用哪些loader进行处理</span><br><span class="line">    use: [</span><br><span class="line">      &#x2F;&#x2F; use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br><span class="line">      &#x2F;&#x2F; 创建style标签，将js中的样式资源插入进行，添加到head中生效</span><br><span class="line">      &#39;style-loader&#39;,</span><br><span class="line">      &#x2F;&#x2F; 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span><br><span class="line">      &#39;css-loader&#39;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 匹配.less后缀的文件  </span><br><span class="line">    test: &#x2F;\.less$&#x2F;,</span><br><span class="line">    use: [</span><br><span class="line">      &#39;style-loader&#39;,</span><br><span class="line">      &#39;css-loader&#39;,</span><br><span class="line">      &#x2F;&#x2F; 将less文件编译成css文件</span><br><span class="line">      &#x2F;&#x2F; 需要下载 less-loader和less</span><br><span class="line">      &#39;less-loader&#39;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; plugins的配置</span><br><span class="line">plugins: [</span><br><span class="line">    &#x2F;&#x2F; 详细plugins的配置</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模式</span><br><span class="line">mode: &#39;development&#39;, &#x2F;&#x2F; 开发模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>运行指令：webpack</li></ul><h2 id="打包HTML资源"><a href="#打包HTML资源" class="headerlink" title="打包HTML资源"></a>打包HTML资源</h2><ol><li>下载安装plugin包<ul><li>npm install –save-dev html -webpack-plugin</li></ul></li><li>修改配置文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#x2F;&#x2F; loader的配置</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    &#x2F;&#x2F; plugins的配置</span><br><span class="line">    &#x2F;&#x2F; html-webpack-plugin</span><br><span class="line">    &#x2F;&#x2F; 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS&#x2F;CSS）</span><br><span class="line">    &#x2F;&#x2F; 需求：需要有结构的HTML文件</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">    &#x2F;&#x2F; 复制 &#39;.&#x2F;src&#x2F;index.html&#39; 文件，并自动引入打包输出的所有资源（JS&#x2F;CSS）</span><br><span class="line">    template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line">mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h2><ol><li>下载安装loader包<ul><li>npm install –save-dev html-loader url-loader file-loader</li></ul></li><li>修改配置文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: &#x2F;\.less$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 要使用多个loader处理用use</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 问题：默认处理不了html中img图片</span><br><span class="line">        &#x2F;&#x2F; 处理图片资源</span><br><span class="line">        test: &#x2F;\.(jpg|png|gif)$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 使用一个loader</span><br><span class="line">        &#x2F;&#x2F; 下载 url-loader file-loader</span><br><span class="line"></span><br><span class="line">        loader: &#39;url-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">        limit: 8 * 1024,</span><br><span class="line">        &#x2F;&#x2F; 图片小于8kb，就会被base64处理</span><br><span class="line">        &#x2F;&#x2F; 优点: 减少请求数量（减轻服务器压力）</span><br><span class="line">        &#x2F;&#x2F; 缺点：图片体积会更大（文件请求速度更慢）</span><br><span class="line">        &#x2F;&#x2F; base64在本地解码，所以会减少服务器压力，如果图片过大还继续采用base64编码会导致cpu调用率上升，网页加载时变卡</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br><span class="line">        &#x2F;&#x2F; 解析时会出问题：[object Module]</span><br><span class="line">        &#x2F;&#x2F; 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br><span class="line">        esModule: false,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 给图片进行重命名</span><br><span class="line">        &#x2F;&#x2F; [hash:10]取图片的hash的前10位</span><br><span class="line">        &#x2F;&#x2F; [ext]取文件原来扩展名</span><br><span class="line">        name: &#39;[hash:10].[ext]&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: &#x2F;\.html$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br><span class="line">        loader: &#39;html-loader&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line">mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="打包其他资源"><a href="#打包其他资源" class="headerlink" title="打包其他资源"></a>打包其他资源</h2><ol><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 打包其他资源(除了html&#x2F;js&#x2F;css资源以外的资源)</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 排除css&#x2F;js&#x2F;html资源，剩下的资源用file loader进行处理</span><br><span class="line">        exclude: &#x2F;\.(css|js|html|less)$&#x2F;,</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="devserver"><a href="#devserver" class="headerlink" title="devserver"></a>devserver</h2><ul><li>开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</li><li>特点：只会在内存中编译打包，不会有任何输出</li><li>下载：npm install webpack-dev-server -D //本地下载</li><li>启动devServer指令为：npx webpack-dev-server</li></ul><ol><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 打包其他资源(除了html&#x2F;js&#x2F;css资源以外的资源)</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 排除css&#x2F;js&#x2F;html资源</span><br><span class="line">        exclude: &#x2F;\.(css|js|html|less)$&#x2F;,</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  devServer: &#123;</span><br><span class="line">    &#x2F;&#x2F; 项目构建后路径</span><br><span class="line">    contentBase: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">    &#x2F;&#x2F; 启动gzip压缩</span><br><span class="line">    compress: true,</span><br><span class="line">    &#x2F;&#x2F; 端口号</span><br><span class="line">    port: 3000,</span><br><span class="line">    &#x2F;&#x2F; 自动打开浏览器</span><br><span class="line">    open: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令:npx webpack-dev-server</li></ol><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><ul><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">  开发环境配置：能让代码运行</span><br><span class="line">    运行项目指令：</span><br><span class="line">      webpack 会将打包结果输出出去</span><br><span class="line">      npx webpack-dev-server 只会在内存中编译打包，没有输出</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;&#x2F; loader的配置</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理less资源</span><br><span class="line">        test: &#x2F;\.less$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理css资源</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理图片资源</span><br><span class="line">        test: &#x2F;\.(jpg|png|gif)$&#x2F;,</span><br><span class="line">        loader: &#39;url-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 8 * 1024,</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">          &#x2F;&#x2F; 关闭es6模块化</span><br><span class="line">          esModule: false,</span><br><span class="line">          outputPath: &#39;imgs&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理html中img资源</span><br><span class="line">        test: &#x2F;\.html$&#x2F;,</span><br><span class="line">        loader: &#39;html-loader&#39;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理其他资源</span><br><span class="line">        exclude: &#x2F;\.(html|js|css|less|jpg|png|gif)&#x2F;,</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">          outputPath: &#39;media&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    &#x2F;&#x2F; plugins的配置</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">    compress: true,</span><br><span class="line">    port: 3000,</span><br><span class="line">    open: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="webpack生产环境配置"><a href="#webpack生产环境配置" class="headerlink" title="webpack生产环境配置"></a>webpack生产环境配置</h1><h2 id="提取js中的css成单独文件"><a href="#提取js中的css成单独文件" class="headerlink" title="提取js中的css成单独文件"></a>提取js中的css成单独文件</h2><ol><li>下载插件<ul><li>npm install –save-dev mini-css-extract-plugin</li></ul></li><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#x2F;&#x2F; 创建style标签，将样式放入</span><br><span class="line">          &#x2F;&#x2F; &#39;style-loader&#39;, </span><br><span class="line">          &#x2F;&#x2F; 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &#x2F;&#x2F; 将css文件整合到js文件中</span><br><span class="line">          &#39;css-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      &#x2F;&#x2F; 对输出的css文件进行重命名</span><br><span class="line">      filename: &#39;css&#x2F;built.css&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="css兼容性处理"><a href="#css兼容性处理" class="headerlink" title="css兼容性处理"></a>css兼容性处理</h2><ol><li>下载loader<ul><li>npm install –save-dev postcss-loader postcss-preset-env</li></ul></li><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置nodejs环境变量</span><br><span class="line">&#x2F;&#x2F; process.env.NODE_ENV &#x3D; &#39;development&#39;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &#39;css-loader&#39;,</span><br><span class="line"></span><br><span class="line">          &#x2F;*</span><br><span class="line">            css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span><br><span class="line"></span><br><span class="line">            帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span><br><span class="line"></span><br><span class="line">            在package.json中添加：</span><br><span class="line">            &quot;browserslist&quot;: &#123;</span><br><span class="line">              &#x2F;&#x2F; 转换到开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV &#x3D; development</span><br><span class="line">              &quot;development&quot;: [</span><br><span class="line">                &quot;last 1 chrome version&quot;,</span><br><span class="line">                &quot;last 1 firefox version&quot;,</span><br><span class="line">                &quot;last 1 safari version&quot;</span><br><span class="line">              ],</span><br><span class="line">              &#x2F;&#x2F; 生产环境：默认是看生产环境</span><br><span class="line">              &quot;production&quot;: [</span><br><span class="line">                &quot;&gt;0.2%&quot;,  兼容大于99.8%的浏览器</span><br><span class="line">                &quot;not dead&quot;, 不用已经消失的浏览器</span><br><span class="line">                &quot;not op_mini all&quot; 不用op_mini浏览器</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          *&#x2F;</span><br><span class="line"></span><br><span class="line">          &#x2F;&#x2F; 使用loader的默认配置</span><br><span class="line">          &#x2F;&#x2F; &#39;postcss-loader&#39;,</span><br><span class="line">          &#x2F;&#x2F; 修改loader的配置</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;postcss-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: &#39;postcss&#39;,</span><br><span class="line">              plugins: () &#x3D;&gt; [</span><br><span class="line">                &#x2F;&#x2F; postcss的插件</span><br><span class="line">                require(&#39;postcss-preset-env&#39;)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.css&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>修改package.json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在package.json中添加：</span><br><span class="line">&quot;browserslist&quot;: &#123;</span><br><span class="line">    &#x2F;&#x2F; 转换到开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV &#x3D; development</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">    &quot;last 1 chrome version&quot;,</span><br><span class="line">    &quot;last 1 firefox version&quot;,</span><br><span class="line">    &quot;last 1 safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &#x2F;&#x2F; 生产环境：默认是看生产环境</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">    &quot;&gt;0.2%&quot;,  兼容大于99.8%的浏览器</span><br><span class="line">    &quot;not dead&quot;, 不用已经消失的浏览器</span><br><span class="line">    &quot;not op_mini all&quot; 不用op_mini浏览器</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="压缩css"><a href="#压缩css" class="headerlink" title="压缩css"></a>压缩css</h2><ol><li>下载安装包<ul><li>npm install –save-dev optimize-css-assets-webpack-plugin</li></ul></li><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置nodejs环境变量</span><br><span class="line">&#x2F;&#x2F; process.env.NODE_ENV &#x3D; &#39;development&#39;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &#39;css-loader&#39;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;postcss-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              ident: &#39;postcss&#39;,</span><br><span class="line">              plugins: () &#x3D;&gt; [</span><br><span class="line">                &#x2F;&#x2F; postcss的插件</span><br><span class="line">                require(&#39;postcss-preset-env&#39;)()</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; 压缩css</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h2><ol><li>下载安装包<ul><li>npm install –save-dev eslint-loader eslint  eslint-config-airbnb-base eslint-plugin-import</li></ul></li><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;*</span><br><span class="line">        语法检查： eslint-loader  eslint</span><br><span class="line">          注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="line">          设置检查规则：</span><br><span class="line">            package.json中eslintConfig中设置~</span><br><span class="line">              &quot;eslintConfig&quot;: &#123;</span><br><span class="line">                &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span><br><span class="line">      *&#x2F;</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;, &#x2F;&#x2F;排除node_modules</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          &#x2F;&#x2F; 自动修复eslint的错误</span><br><span class="line">          fix: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>修改package.json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">设置检查规则：</span><br><span class="line">&#x2F;&#x2F;package.json中eslintConfig中设置~</span><br><span class="line">    &quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;extends&quot;: &quot;airbnb-base&quot;,&#x2F;&#x2F;使用airbnb-base的代码风格</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">      &quot;browser&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="js兼容性处理"><a href="#js兼容性处理" class="headerlink" title="js兼容性处理"></a>js兼容性处理</h2><ol><li>下载安装包<ul><li>npm install –save-dev babel-loader @babel/core @babel/preset-env @babel/polyfill core-js</li></ul></li><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;*</span><br><span class="line">        js兼容性处理：babel-loader @babel&#x2F;core </span><br><span class="line">          1. 基本js兼容性处理 --&gt; @babel&#x2F;preset-env</span><br><span class="line">            问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="line">          2. 全部js兼容性处理 --&gt; @babel&#x2F;polyfill  </span><br><span class="line">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class="line">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span><br><span class="line">      *&#x2F;  </span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        loader: &#39;babel-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          &#x2F;&#x2F; 预设：指示babel做怎么样的兼容性处理</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">              &#123;</span><br><span class="line">                &#x2F;&#x2F; 按需加载</span><br><span class="line">                useBuiltIns: &#39;usage&#39;,</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 指定core-js版本</span><br><span class="line">                corejs: &#123;</span><br><span class="line">                  version: 3</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 指定兼容性做到哪个版本浏览器</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: &#39;60&#39;,</span><br><span class="line">                  firefox: &#39;60&#39;,</span><br><span class="line">                  ie: &#39;9&#39;,</span><br><span class="line">                  safari: &#39;10&#39;,</span><br><span class="line">                  edge: &#39;17&#39;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="js压缩"><a href="#js压缩" class="headerlink" title="js压缩"></a>js压缩</h2><ol><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  &#x2F;&#x2F; 生产环境下会自动压缩js代码</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="html压缩"><a href="#html压缩" class="headerlink" title="html压缩"></a>html压缩</h2><ol><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      &#x2F;&#x2F; 压缩html代码</span><br><span class="line">      minify: &#123;</span><br><span class="line">        &#x2F;&#x2F; 移除空格</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        &#x2F;&#x2F; 移除注释</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="生产环境配置"><a href="#生产环境配置" class="headerlink" title="生产环境配置"></a>生产环境配置</h2><ol><li>修改配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br><span class="line">process.env.NODE_ENV &#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复用loader</span><br><span class="line">const commonCssLoader &#x3D; [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  &#39;css-loader&#39;,</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 还需要在package.json中定义browserslist</span><br><span class="line">    loader: &#39;postcss-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: &#39;postcss&#39;,</span><br><span class="line">      plugins: () &#x3D;&gt; [require(&#39;postcss-preset-env&#39;)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [...commonCssLoader]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.less$&#x2F;,</span><br><span class="line">        use: [...commonCssLoader, &#39;less-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;*</span><br><span class="line">        正常来讲，一个文件只能被一个loader处理。</span><br><span class="line">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="line">          先执行eslint 在执行babel</span><br><span class="line">      *&#x2F;</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 在package.json中eslintConfig --&gt; airbnb</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 优先执行</span><br><span class="line">        enforce: &#39;pre&#39;,</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        loader: &#39;babel-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">              &#123;</span><br><span class="line">                useBuiltIns: &#39;usage&#39;,</span><br><span class="line">                corejs: &#123;version: 3&#125;,</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: &#39;60&#39;,</span><br><span class="line">                  firefox: &#39;50&#39;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(jpg|png|gif)&#x2F;,</span><br><span class="line">        loader: &#39;url-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 8 * 1024,</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">          outputPath: &#39;imgs&#39;,</span><br><span class="line">          esModule: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.html$&#x2F;,</span><br><span class="line">        loader: &#39;html-loader&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exclude: &#x2F;\.(js|css|less|html|jpg|png|gif)&#x2F;,</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          outputPath: &#39;media&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">          &#x2F;&#x2F;移除空格和注释</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h1 id="webpack优化环境配置"><a href="#webpack优化环境配置" class="headerlink" title="webpack优化环境配置"></a>webpack优化环境配置</h1><ol><li><p>开发环境性能优化</p><ul><li>优化打包构建速度<ul><li>HMR</li></ul></li><li>优化代码调试<ul><li>source-map</li></ul></li></ul></li><li><p>生产环境性能优化</p><ul><li>优化打包构建速度<ul><li>oneOf</li><li>babel缓存</li><li>多进程打包</li><li>externals</li><li>dll</li></ul></li><li>优化代码运行的性能<ul><li>缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li><li>code split</li><li>懒加载/预加载</li><li>pwa</li></ul></li></ul></li></ol><h2 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h2><ul><li><p>HMR: hot module replacement 热模块替换 / 模块热替换</p><ul><li>作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块） 极大提升构建速度</li></ul></li><li><p>css文件：可以使用HMR功能：因为style-loader内部实现了~</p></li><li><p>js文件：默认不能使用HMR功能 –&gt; 需要修改js代码，添加支持HMR功能的代码</p><ul><li>注意：HMR功能对js的处理，只能处理非入口js文件的其他文件</li></ul></li><li><p>html文件: 默认不能使用HMR功能.同时会导致问题：html文件不能热更新了（不用做HMR功能）</p><ul><li>解决：修改entry入口，将html文件引入</li></ul></li></ul><ol><li>修改配置文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: [&#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;index.html&#39;],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;&#x2F; loader的配置</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理less资源</span><br><span class="line">        test: &#x2F;\.less$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理css资源</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理图片资源</span><br><span class="line">        test: &#x2F;\.(jpg|png|gif)$&#x2F;,</span><br><span class="line">        loader: &#39;url-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 8 * 1024,</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">          &#x2F;&#x2F; 关闭es6模块化</span><br><span class="line">          esModule: false,</span><br><span class="line">          outputPath: &#39;imgs&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理html中img资源</span><br><span class="line">        test: &#x2F;\.html$&#x2F;,</span><br><span class="line">        loader: &#39;html-loader&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理其他资源</span><br><span class="line">        exclude: &#x2F;\.(html|js|css|less|jpg|png|gif)&#x2F;,</span><br><span class="line">        loader: &#39;file-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">          outputPath: &#39;media&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x2F;&#x2F; plugins的配置</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">    compress: true,</span><br><span class="line">    port: 3000,</span><br><span class="line">    open: true,</span><br><span class="line">    &#x2F;&#x2F; 开启HMR功能</span><br><span class="line">    &#x2F;&#x2F; 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span><br><span class="line">    hot: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>js文件处理<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (module.hot) &#123;</span><br><span class="line">  &#x2F;&#x2F; 一旦 module.hot 为true，说明开启了HMR功能。 --&gt; 让HMR功能代码生效</span><br><span class="line">  module.hot.accept(&#39;.&#x2F;print.js&#39;, function() &#123;</span><br><span class="line">    &#x2F;&#x2F; 方法会监听 print.js 文件的变化，一旦发生变化，其他模块不会重新打包构建。</span><br><span class="line">    &#x2F;&#x2F; 会执行后面的回调函数</span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><ul><li><p>source-map: 一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</p></li><li><p>内联 和 外部的区别：</p><ol><li>外部生成了文件，内联没有 </li><li>内联构建速度更快</li></ol></li><li><p>inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</p><ul><li>source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>inline-source-map：内联<ul><li>只生成一个内联source-map</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>hidden-source-map：外部<ul><li>错误代码错误原因，但是没有错误位置</li><li>不能追踪源代码错误，只能提示到构建后代码的错误位置</li></ul></li><li>eval-source-map：内联<ul><li>每一个文件都生成对应的source-map，都在eval</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>nosources-source-map：外部<ul><li>错误代码准确信息, 但是没有任何源代码信息</li></ul></li><li>cheap-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置 </li><li>只能精确到行</li></ul></li><li>cheap-module-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置 </li><li>module会将loader的source map加入</li></ul></li></ul></li><li><p>开发环境：速度快，调试更友好</p><ul><li>速度快(eval&gt;inline&gt;cheap&gt;…)<ul><li>eval-cheap-souce-map</li><li>eval-source-map</li></ul></li><li>调试更友好  <ul><li>souce-map</li><li>cheap-module-souce-map</li><li>cheap-souce-map</li></ul></li><li>平衡性好<ul><li>eval-source-map  / eval-cheap-module-souce-map</li></ul></li></ul></li><li><p>生产环境：源代码要不要隐藏? 调试要不要更友好</p><ul><li>内联会让代码体积变大，所以在生产环境不用内联</li><li>nosources-source-map 全部隐藏</li><li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li><li>平衡性<ul><li>source-map / cheap-module-souce-map</li></ul></li></ul></li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: [&#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;index.html&#39;],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;&#x2F; loader的配置</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x2F;&#x2F; plugins的配置</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">    compress: true,</span><br><span class="line">    port: 3000,</span><br><span class="line">    open: true,</span><br><span class="line">    hot: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; source -map 配置</span><br><span class="line">  devtool: &#39;eval-source-map&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h2 id="oneof"><a href="#oneof" class="headerlink" title="oneof"></a>oneof</h2><ul><li>提升构建速度，把所有的loader都放进oneof里就不会加载多次loader了</li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br><span class="line">process.env.NODE_ENV &#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复用loader</span><br><span class="line">const commonCssLoader &#x3D; [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  &#39;css-loader&#39;,</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 还需要在package.json中定义browserslist</span><br><span class="line">    loader: &#39;postcss-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: &#39;postcss&#39;,</span><br><span class="line">      plugins: () &#x3D;&gt; [require(&#39;postcss-preset-env&#39;)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 在package.json中eslintConfig --&gt; airbnb</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 优先执行</span><br><span class="line">        enforce: &#39;pre&#39;,</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 以下loader只会匹配一个</span><br><span class="line">        &#x2F;&#x2F; 注意：不能有两个配置处理同一种类型文件,所以在js语法检查和兼容性问题时，需要将其中一个loader拿到oneof外面</span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.css$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.less$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader, &#39;less-loader&#39;]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#x2F;*</span><br><span class="line">            正常来讲，一个文件只能被一个loader处理。</span><br><span class="line">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="line">              先执行eslint 在执行babel</span><br><span class="line">          *&#x2F;</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.js$&#x2F;,</span><br><span class="line">            exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">            loader: &#39;babel-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: &#39;usage&#39;,</span><br><span class="line">                    corejs: &#123;version: 3&#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: &#39;60&#39;,</span><br><span class="line">                      firefox: &#39;50&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.(jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;url-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8 * 1024,</span><br><span class="line">              name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">              outputPath: &#39;imgs&#39;,</span><br><span class="line">              esModule: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.html$&#x2F;,</span><br><span class="line">            loader: &#39;html-loader&#39;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: &#x2F;\.(js|css|less|html|jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;file-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: &#39;media&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2></li></ol><ul><li>babel缓存<ul><li>cacheDirectory: true</li><li>–&gt; 让第二次打包构建速度更快</li></ul></li><li>文件资源缓存<ul><li>hash: 每次wepack构建时会生成一个唯一的hash值。<ul><li>问题: 因为js和css同时使用一个hash值。<ul><li>如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）</li></ul></li></ul></li><li>chunkhash：根据chunk生成的hash值。如果打包来源于同一个chunk，那么hash值就一样<ul><li>问题: js和css的hash值还是一样的<ul><li>因为css是在js中被引入的，所以同属于一个chunk</li></ul></li></ul></li><li>contenthash: 根据文件的内容生成hash值。不同文件hash值一定不一样    </li><li>–&gt; 让代码上线运行缓存更好使用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br><span class="line">process.env.NODE_ENV &#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复用loader</span><br><span class="line">const commonCssLoader &#x3D; [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  &#39;css-loader&#39;,</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 还需要在package.json中定义browserslist</span><br><span class="line">    loader: &#39;postcss-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: &#39;postcss&#39;,</span><br><span class="line">      plugins: () &#x3D;&gt; [require(&#39;postcss-preset-env&#39;)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.[contenthash:10].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 在package.json中eslintConfig --&gt; airbnb</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 优先执行</span><br><span class="line">        enforce: &#39;pre&#39;,</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.css$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.less$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader, &#39;less-loader&#39;]</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.js$&#x2F;,</span><br><span class="line">            exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">            loader: &#39;babel-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              presets: [</span><br><span class="line">                [</span><br><span class="line">                  &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    useBuiltIns: &#39;usage&#39;,</span><br><span class="line">                    corejs: &#123; version: 3 &#125;,</span><br><span class="line">                    targets: &#123;</span><br><span class="line">                      chrome: &#39;60&#39;,</span><br><span class="line">                      firefox: &#39;50&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ],</span><br><span class="line">              &#x2F;&#x2F; 开启babel缓存</span><br><span class="line">              &#x2F;&#x2F; 第二次构建时，会读取之前的缓存</span><br><span class="line">              cacheDirectory: true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.(jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;url-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8 * 1024,</span><br><span class="line">              name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">              outputPath: &#39;imgs&#39;,</span><br><span class="line">              esModule: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.html$&#x2F;,</span><br><span class="line">            loader: &#39;html-loader&#39;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: &#x2F;\.(js|css|less|html|jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;file-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: &#39;media&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.[contenthash:10].css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;,</span><br><span class="line">  devtool: &#39;source-map&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h2><ul><li><p>tree shaking：去除无用代码</p><ul><li>前提：<ol><li>必须使用ES6模块化  </li><li>开启production环境</li></ol></li><li>作用: 减少代码体积</li></ul></li><li><p>在package.json中配置 </p><ul><li>“sideEffects”: false 所有代码都没有副作用（都可以进行tree shaking）</li><li>问题：可能会把css / @babel/polyfill （副作用）文件干掉<br>“sideEffects”: [“<em>.css”, “</em>.less”]</li></ul></li></ul><ol><li>配置package.json文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;sideEffects&quot;: [</span><br><span class="line">  &quot;*.css&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h2 id="code-split"><a href="#code-split" class="headerlink" title="code split"></a>code split</h2><ul><li>将一个大的js文件分割成几个小文件，这样就可以实现按需加载</li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 单入口</span><br><span class="line">  &#x2F;&#x2F; entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">    test: &#39;.&#x2F;src&#x2F;js&#x2F;test.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    &#x2F;&#x2F; [name]：取文件名</span><br><span class="line">    filename: &#39;js&#x2F;[name].[contenthash:10].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  &#x2F;*</span><br><span class="line">    1. 可以将node_modules中代码单独打包一个chunk最终输出</span><br><span class="line">    2. 自动分析多入口chunk中，有没有公共的文件。如果有会打包成单独一个chunk</span><br><span class="line">  *&#x2F;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: &#39;all&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&#39;btn&#39;).onclick &#x3D; function() &#123;</span><br><span class="line">  &#x2F;&#x2F; 懒加载：当文件需要使用时才加载</span><br><span class="line">  &#x2F;&#x2F; 预加载 prefetch：会在使用之前，提前加载js文件 </span><br><span class="line">  &#x2F;&#x2F; 正常加载可以认为是并行加载（同一时间加载多个文件）  </span><br><span class="line">  &#x2F;&#x2F; 预加载 prefetch：等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</span><br><span class="line">  import(&#x2F;* webpackChunkName: &#39;test&#39;, webpackPrefetch: true *&#x2F;&#39;.&#x2F;test&#39;).then((&#123; mul &#125;) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(mul(4, 5));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="pwa"><a href="#pwa" class="headerlink" title="pwa"></a>pwa</h2><ul><li>渐进式网络开发应用程序(离线可访问)<ul><li>workbox –&gt; workbox-webpack-plugin</li></ul></li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const WorkboxWebpackPlugin &#x3D; require(&#39;workbox-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br><span class="line">process.env.NODE_ENV &#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.[contenthash:10].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      </span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.[contenthash:10].css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    new WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      &#x2F;*</span><br><span class="line">        1. 帮助serviceworker快速启动</span><br><span class="line">        2. 删除旧的 serviceworker</span><br><span class="line"></span><br><span class="line">        生成一个 serviceworker 配置文件~</span><br><span class="line">      *&#x2F;</span><br><span class="line">      clientsClaim: true,</span><br><span class="line">      skipWaiting: true</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;,</span><br><span class="line">  devtool: &#39;source-map&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>修改入口js文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;</span><br><span class="line">  1. eslint不认识 window、navigator全局变量</span><br><span class="line">    解决：需要修改package.json中eslintConfig配置</span><br><span class="line">      &quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true &#x2F;&#x2F; 支持浏览器端全局变量</span><br><span class="line">      &#125;</span><br><span class="line">   2. sw代码必须运行在服务器上</span><br><span class="line">      --&gt; nodejs</span><br><span class="line">      --&gt;</span><br><span class="line">        npm i serve -g</span><br><span class="line">        serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 注册serviceWorker</span><br><span class="line">&#x2F;&#x2F; 处理兼容性问题</span><br><span class="line">if (&#39;serviceWorker&#39; in navigator) &#123;</span><br><span class="line">  window.addEventListener(&#39;load&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(&#39;&#x2F;service-worker.js&#39;)</span><br><span class="line">      .then(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;sw注册成功了~&#39;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;sw注册失败了~&#39;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h2><ul><li>thread-loader</li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin &#x3D; require(&#39;optimize-css-assets-webpack-plugin&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const WorkboxWebpackPlugin &#x3D; require(&#39;workbox-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br><span class="line">process.env.NODE_ENV &#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复用loader</span><br><span class="line">const commonCssLoader &#x3D; [</span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  &#39;css-loader&#39;,</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 还需要在package.json中定义browserslist</span><br><span class="line">    loader: &#39;postcss-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: &#39;postcss&#39;,</span><br><span class="line">      plugins: () &#x3D;&gt; [require(&#39;postcss-preset-env&#39;)()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.[contenthash:10].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 在package.json中eslintConfig --&gt; airbnb</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 优先执行</span><br><span class="line">        enforce: &#39;pre&#39;,</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          fix: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 以下loader只会匹配一个</span><br><span class="line">        &#x2F;&#x2F; 注意：不能有两个配置处理同一种类型文件</span><br><span class="line">        oneOf: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.css$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.less$&#x2F;,</span><br><span class="line">            use: [...commonCssLoader, &#39;less-loader&#39;]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#x2F;*</span><br><span class="line">            正常来讲，一个文件只能被一个loader处理。</span><br><span class="line">            当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="line">              先执行eslint 在执行babel</span><br><span class="line">          *&#x2F;</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.js$&#x2F;,</span><br><span class="line">            exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">            use: [</span><br><span class="line">              &#x2F;* </span><br><span class="line">                开启多进程打包。 </span><br><span class="line">                进程启动大概为600ms，进程通信也有开销。</span><br><span class="line">                只有工作消耗时间比较长，才需要多进程打包</span><br><span class="line">              *&#x2F;</span><br><span class="line">              &#123;</span><br><span class="line">                loader: &#39;thread-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  workers: 2 &#x2F;&#x2F; 进程2个</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                loader: &#39;babel-loader&#39;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  presets: [</span><br><span class="line">                    [</span><br><span class="line">                      &#39;@babel&#x2F;preset-env&#39;,</span><br><span class="line">                      &#123;</span><br><span class="line">                        useBuiltIns: &#39;usage&#39;,</span><br><span class="line">                        corejs: &#123; version: 3 &#125;,</span><br><span class="line">                        targets: &#123;</span><br><span class="line">                          chrome: &#39;60&#39;,</span><br><span class="line">                          firefox: &#39;50&#39;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    ]</span><br><span class="line">                  ],</span><br><span class="line">                  &#x2F;&#x2F; 开启babel缓存</span><br><span class="line">                  &#x2F;&#x2F; 第二次构建时，会读取之前的缓存</span><br><span class="line">                  cacheDirectory: true</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.(jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;url-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8 * 1024,</span><br><span class="line">              name: &#39;[hash:10].[ext]&#39;,</span><br><span class="line">              outputPath: &#39;imgs&#39;,</span><br><span class="line">              esModule: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: &#x2F;\.html$&#x2F;,</span><br><span class="line">            loader: &#39;html-loader&#39;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exclude: &#x2F;\.(js|css|less|html|jpg|png|gif)&#x2F;,</span><br><span class="line">            loader: &#39;file-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: &#39;media&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: &#39;css&#x2F;built.[contenthash:10].css&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">        removeComments: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    new WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      &#x2F;*</span><br><span class="line">        1. 帮助serviceworker快速启动</span><br><span class="line">        2. 删除旧的 serviceworker</span><br><span class="line"></span><br><span class="line">        生成一个 serviceworker 配置文件~</span><br><span class="line">      *&#x2F;</span><br><span class="line">      clientsClaim: true,</span><br><span class="line">      skipWaiting: true</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;,</span><br><span class="line">  devtool: &#39;source-map&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><ul><li>防止将某些包打包到最终输出的文件中</li></ul><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    &#x2F;&#x2F; 拒绝jQuery被打包进来</span><br><span class="line">    jquery: &#39;jQuery&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h2><ul><li>动态链接库，类似于externals，不同的是dll会将多个库单独的打包，将多个库打包成一个chunk</li></ul><ol><li>配置dll.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">  使用dll技术，对某些库（第三方库：jquery、react、vue...）进行单独打包</span><br><span class="line">    当你运行 webpack 时，默认查找 webpack.config.js 配置文件</span><br><span class="line">    需求：需要运行 webpack.dll.js 文件</span><br><span class="line">      --&gt; webpack --config webpack.dll.js</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    &#x2F;&#x2F; 最终打包生成的[name] --&gt; jquery</span><br><span class="line">    &#x2F;&#x2F; [&#39;jquery&#39;] --&gt; 要打包的库是jquery</span><br><span class="line">    jquery: [&#39;jquery&#39;],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;dll&#39;),</span><br><span class="line">    library: &#39;[name]_[hash]&#39; &#x2F;&#x2F; 打包的库里面向外暴露出去的内容叫什么名字</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x2F;&#x2F; 打包生成一个 manifest.json --&gt; 提供和jquery映射</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      name: &#39;[name]_[hash]&#39;, &#x2F;&#x2F; 映射库的暴露的内容名称</span><br><span class="line">      path: resolve(__dirname, &#39;dll&#x2F;manifest.json&#39;) &#x2F;&#x2F; 输出文件路径</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>配置config文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">const AddAssetHtmlWebpackPlugin &#x3D; require(&#39;add-asset-html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;built.js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; 告诉webpack哪些库不参与打包，同时使用时的名称也得变~</span><br><span class="line">    new webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: resolve(__dirname, &#39;dll&#x2F;manifest.json&#39;)</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; 将某个文件打包输出去，并在html中自动引入该资源</span><br><span class="line">    new AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">      filepath: resolve(__dirname, &#39;dll&#x2F;jquery.js&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ol><h1 id="webpack配置详解"><a href="#webpack配置详解" class="headerlink" title="webpack配置详解"></a>webpack配置详解</h1><h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">  entry: 入口起点</span><br><span class="line">    1. string --&gt; &#39;.&#x2F;src&#x2F;index.js&#39;</span><br><span class="line">      单入口</span><br><span class="line">      打包形成一个chunk。 输出一个bundle文件。</span><br><span class="line">      此时chunk的名称默认是 main</span><br><span class="line">    2. array  --&gt; [&#39;.&#x2F;src&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;add.js&#39;]</span><br><span class="line">      多入口</span><br><span class="line">      所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br><span class="line">        --&gt; 只有在HMR功能中让html热更新生效~</span><br><span class="line">    3. object</span><br><span class="line">      多入口</span><br><span class="line">      有几个入口文件就形成几个chunk，输出几个bundle文件</span><br><span class="line">      此时chunk的名称是 key</span><br><span class="line"></span><br><span class="line">      --&gt; 特殊用法</span><br><span class="line">        &#123;</span><br><span class="line">          &#x2F;&#x2F; 所有入口文件最终只会形成一个chunk, 输出出去只有一个bundle文件。</span><br><span class="line">          index: [&#39;.&#x2F;src&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;count.js&#39;], </span><br><span class="line">          &#x2F;&#x2F; 形成一个chunk，输出一个bundle文件。</span><br><span class="line">          add: &#39;.&#x2F;src&#x2F;add.js&#39;</span><br><span class="line">        &#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: [&#39;.&#x2F;src&#x2F;index.js&#39;, &#39;.&#x2F;src&#x2F;count.js&#39;], </span><br><span class="line">    add: &#39;.&#x2F;src&#x2F;add.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin()],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    &#x2F;&#x2F; 文件名称（指定名称+目录）</span><br><span class="line">    filename: &#39;js&#x2F;[name].js&#39;,</span><br><span class="line">    &#x2F;&#x2F; 输出文件目录（将来所有资源输出的公共目录）</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">    &#x2F;&#x2F; 所有资源引入公共路径前缀 --&gt; &#39;imgs&#x2F;a.jpg&#39; --&gt; &#39;&#x2F;imgs&#x2F;a.jpg&#39;</span><br><span class="line">    publicPath: &#39;&#x2F;&#39;,</span><br><span class="line">    chunkFilename: &#39;js&#x2F;[name]_chunk.js&#39;, &#x2F;&#x2F; 非入口chunk的名称</span><br><span class="line">    &#x2F;&#x2F; library: &#39;[name]&#39;, &#x2F;&#x2F; 整个库向外暴露的变量名</span><br><span class="line">    &#x2F;&#x2F; libraryTarget: &#39;window&#39; &#x2F;&#x2F; 变量名添加到哪个属性上 browser</span><br><span class="line">    &#x2F;&#x2F; libraryTarget: &#39;global&#39; &#x2F;&#x2F; 变量名添加到哪个属性上 node</span><br><span class="line">    &#x2F;&#x2F; libraryTarget: &#39;commonjs&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin()],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;[name].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;&#x2F; loader的配置</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 多个loader用use</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 排除node_modules下的js文件</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        &#x2F;&#x2F; 只检查 src 下的js文件</span><br><span class="line">        include: resolve(__dirname, &#39;src&#39;),</span><br><span class="line">        &#x2F;&#x2F; 优先执行</span><br><span class="line">        enforce: &#39;pre&#39;,</span><br><span class="line">        &#x2F;&#x2F; 延后执行</span><br><span class="line">        &#x2F;&#x2F; enforce: &#39;post&#39;,</span><br><span class="line">        &#x2F;&#x2F; 单个loader用loader</span><br><span class="line">        loader: &#39;eslint-loader&#39;,</span><br><span class="line">        options: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 以下配置只会生效一个</span><br><span class="line">        oneOf: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin()],</span><br><span class="line">  mode: &#39;development&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;js&#x2F;[name].js&#39;,</span><br><span class="line">    path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin()],</span><br><span class="line">  mode: &#39;development&#39;,</span><br><span class="line">  &#x2F;&#x2F; 解析模块的规则</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    &#x2F;&#x2F; 配置解析模块路径别名: 优点简写路径 缺点路径没有提示</span><br><span class="line">    alias: &#123;</span><br><span class="line">      $css: resolve(__dirname, &#39;src&#x2F;css&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 配置省略文件路径的后缀名</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.json&#39;, &#39;.jsx&#39;, &#39;.css&#39;],</span><br><span class="line">    &#x2F;&#x2F; 告诉 webpack 解析模块是去找哪个目录</span><br><span class="line">    modules: [resolve(__dirname, &#39;..&#x2F;..&#x2F;node_modules&#39;), &#39;node_modules&#39;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="dev-server"><a href="#dev-server" class="headerlink" title="dev server"></a>dev server</h2></li><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  &#x2F;&#x2F; 运行代码的目录</span><br><span class="line">  contentBase: resolve(__dirname, &#39;build&#39;),</span><br><span class="line">  &#x2F;&#x2F; 监视 contentBase 目录下的所有文件，一旦文件变化就会 reload</span><br><span class="line">  watchContentBase: true,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    &#x2F;&#x2F; 忽略文件</span><br><span class="line">    ignored: &#x2F;node_modules&#x2F;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 启动gzip压缩</span><br><span class="line">  compress: true,</span><br><span class="line">  &#x2F;&#x2F; 端口号</span><br><span class="line">  port: 5000,</span><br><span class="line">  &#x2F;&#x2F; 域名</span><br><span class="line">  host: &#39;localhost&#39;,</span><br><span class="line">  &#x2F;&#x2F; 自动打开浏览器</span><br><span class="line">  open: true,</span><br><span class="line">  &#x2F;&#x2F; 开启HMR功能</span><br><span class="line">  hot: true,</span><br><span class="line">  &#x2F;&#x2F; 不要显示启动服务器日志信息</span><br><span class="line">  clientLogLevel: &#39;none&#39;,</span><br><span class="line">  &#x2F;&#x2F; 除了一些基本启动信息以外，其他内容都不要显示</span><br><span class="line">  quiet: true,</span><br><span class="line">  &#x2F;&#x2F; 如果出错了，不要全屏提示~</span><br><span class="line">  overlay: false,</span><br><span class="line">  &#x2F;&#x2F; 服务器代理 --&gt; 解决开发环境跨域问题</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#x2F;&#x2F; 一旦devServer(5000)服务器接受到 &#x2F;api&#x2F;xxx 的请求，就会把请求转发到另外一个服务器(3000)</span><br><span class="line">    &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">      target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">      &#x2F;&#x2F; 发送请求时，请求路径重写：将 &#x2F;api&#x2F;xxx --&gt; &#x2F;xxx （去掉&#x2F;api）</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        &#39;^&#x2F;api&#39;: &#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><ol><li>配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   splitChunks: &#123;</span><br><span class="line">     chunks: &#39;all&#39;</span><br><span class="line">     &#x2F;&#x2F; 默认值，可以不写~</span><br><span class="line">     &#x2F;* minSize: 30 * 1024, &#x2F;&#x2F; 分割的chunk最小为30kb</span><br><span class="line">     maxSiza: 0, &#x2F;&#x2F; 最大没有限制</span><br><span class="line">     minChunks: 1, &#x2F;&#x2F; 要提取的chunk最少被引用1次</span><br><span class="line">     maxAsyncRequests: 5, &#x2F;&#x2F; 按需加载时并行加载的文件的最大数量</span><br><span class="line">     maxInitialRequests: 3, &#x2F;&#x2F; 入口js文件最大并行请求数量</span><br><span class="line">     automaticNameDelimiter: &#39;~&#39;, &#x2F;&#x2F; 名称连接符</span><br><span class="line">     name: true, &#x2F;&#x2F; 可以使用命名规则</span><br><span class="line">     cacheGroups: &#123;</span><br><span class="line">       &#x2F;&#x2F; 分割chunk的组</span><br><span class="line">       &#x2F;&#x2F; node_modules文件会被打包到 vendors 组的chunk中。--&gt; vendors~xxx.js</span><br><span class="line">       &#x2F;&#x2F; 满足上面的公共规则，如：大小超过30kb，至少被引用一次。</span><br><span class="line">       vendors: &#123;</span><br><span class="line">         test: &#x2F;[\\&#x2F;]node_modules[\\&#x2F;]&#x2F;,</span><br><span class="line">         &#x2F;&#x2F; 优先级</span><br><span class="line">         priority: -10</span><br><span class="line">       &#125;,</span><br><span class="line">       default: &#123;</span><br><span class="line">         &#x2F;&#x2F; 要提取的chunk最少被引用2次</span><br><span class="line">         minChunks: 2,</span><br><span class="line">         &#x2F;&#x2F; 优先级</span><br><span class="line">         priority: -20,</span><br><span class="line">         &#x2F;&#x2F; 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span><br><span class="line">         reuseExistingChunk: true</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;*&#x2F;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#x2F;&#x2F; 将当前模块的记录其他模块的hash单独打包为一个文件 runtime</span><br><span class="line">   &#x2F;&#x2F; 解决：修改a文件导致b文件的contenthash变化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   runtimeChunk: &#123;</span><br><span class="line">     name: entrypoint &#x3D;&gt; &#96;runtime-$&#123;entrypoint.name&#125;&#96;</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   minimizer: [</span><br><span class="line">     &#x2F;&#x2F; 配置生产环境的压缩方案：js和css</span><br><span class="line">     new TerserWebpackPlugin(&#123;</span><br><span class="line">       &#x2F;&#x2F; 开启缓存</span><br><span class="line">       cache: true,</span><br><span class="line">       &#x2F;&#x2F; 开启多进程打包</span><br><span class="line">       parallel: true,</span><br><span class="line">       &#x2F;&#x2F; 启动source-map</span><br><span class="line">       sourceMap: true</span><br><span class="line">     &#125;)</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="webpack5（正在开发中-71-）"><a href="#webpack5（正在开发中-71-）" class="headerlink" title="webpack5（正在开发中 71%）"></a>webpack5（正在开发中 71%）</h1><p>此版本重点关注以下内容:</p><ul><li>通过持久缓存提高构建性能.</li><li>使用更好的算法和默认值来改善长期缓存.</li><li>通过更好的树摇和代码生成来改善捆绑包大小.</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>npm i webpack@next webpack-cli -D</li></ul><h2 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h2><ul><li><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。<br>webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p></li><li><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p></li><li><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p></li></ul><p>迁移：</p><ul><li>尽可能尝试使用与前端兼容的模块。</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li></ul><h2 id="Chunk-和模块-ID"><a href="#Chunk-和模块-ID" class="headerlink" title="Chunk 和模块 ID"></a>Chunk 和模块 ID</h2><ul><li>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</li></ul><p><code>chunkIds: &quot;deterministic&quot;, moduleIds: &quot;deterministic&quot;</code></p><h2 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h2><ul><li><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p></li><li><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p></li></ul><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><ol><li>webpack 现在能够处理对嵌套模块的 tree shaking</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">'./inner'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure><ul><li>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</li></ul><ol start="2"><li>webpack 现在能够多个模块之前的关系</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'./something'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></li></ul><ol start="3"><li>webpack 现在能处理对 Commonjs 的 tree shaking</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><ul><li><p>webpack 4 默认只能输出 ES5 代码</p></li><li><p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p></li><li><p>如：<code>output.ecmaVersion: 2015</code></p></li></ul><h2 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack5</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">  javascript: <span class="number">30000</span>,</span><br><span class="line">  style: <span class="number">50000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置缓存</span></span><br><span class="line">cache: &#123;</span><br><span class="line">  <span class="comment">// 磁盘存储</span></span><br><span class="line">  type: <span class="string">"filesystem"</span>,</span><br><span class="line">  buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-缓存将存储到 <code>node_modules/.cache/webpack</code></p><h2 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h2><ul><li><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p></li><li><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p></li></ul><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><ul><li><code>entry: &quot;./src/index.js</code></li><li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li><li><code>output.filename: &quot;[name].js&quot;</code></li></ul><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p><a href="https://github.com/webpack/changelog-v5" target="_blank" rel="noopener">https://github.com/webpack/changelog-v5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;序&lt;br&gt;&lt;br&gt;webpack是一种前端资源构建工具，一个静态模块打包器(modulebundler)&lt;br&gt;&lt;br&gt;在webpack看来,前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理&lt;br&gt;&lt;br&gt;它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="自动化构建工具" scheme="http://xyx6.top/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Webpack" scheme="http://xyx6.top/tags/Webpack/"/>
    
  </entry>
  
</feed>
